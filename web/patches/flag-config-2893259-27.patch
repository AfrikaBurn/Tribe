diff --git a/config/schema/flag.schema.yml b/config/schema/flag.schema.yml
index b144f8e..1e62ec8 100644
--- a/config/schema/flag.schema.yml
+++ b/config/schema/flag.schema.yml
@@ -146,7 +146,7 @@ flag.link_type.plugin.field_entry:
       type: string
       label: 'Where should the form open (new page, modal, etc)'
 
-action.configuration.flag_action:*.*:
+action.configuration.flag_action:*:
   type: mapping
   label: 'Configuration for flag actions'
   mapping:
diff --git a/flag.module b/flag.module
index c0760a8..8dd6181 100644
--- a/flag.module
+++ b/flag.module
@@ -605,13 +605,13 @@ function flag_flag_insert(FlagInterface $flag) {
   $action_manager->clearCachedDefinitions();
 
   // Add the flag/unflag actions for this flag and entity combination.
-  $flag_id = 'flag_action.' . $flag->id() . '.flag';
+  $flag_id = 'flag_action.' . $flag->id() . '_flag';
   if (!Action::load($flag_id)) {
     $action = Action::create([
       'id' => $flag_id,
       'type' => $flag->getFlaggableEntityTypeId(),
       'label' => $flag->getShortText('flag'),
-      'plugin' => 'flag_action:' . $flag->id() . '.flag',
+      'plugin' => 'flag_action:' . $flag->id() . '_flag',
       'configuration' => [
         'flag_id' => $flag->id(),
         'flag_action' => 'flag',
@@ -619,13 +619,13 @@ function flag_flag_insert(FlagInterface $flag) {
     ]);
     $action->trustData()->save();
   }
-  $unflag_id = 'flag_action.' . $flag->id() . '.unflag';
+  $unflag_id = 'flag_action.' . $flag->id() . '_unflag';
   if (!Action::load($unflag_id)) {
     $action = Action::create([
       'id' => $unflag_id,
       'type' => $flag->getFlaggableEntityTypeId(),
       'label' => $flag->getShortText('unflag'),
-      'plugin' => 'flag_action:' . $flag->id() . '.unflag',
+      'plugin' => 'flag_action:' . $flag->id() . '_unflag',
       'configuration' => [
         'flag_id' => $flag->id(),
         'flag_action' => 'unflag',
@@ -645,8 +645,8 @@ function flag_flag_delete(FlagInterface $flag) {
   }
 
   $actions = Action::loadMultiple([
-    'flag_action.' . $flag->id() . '.flag',
-    'flag_action.' . $flag->id() . '.unflag',
+    'flag_action.' . $flag->id() . '_flag',
+    'flag_action.' . $flag->id() . '_unflag',
   ]);
 
   // Remove the flag/unflag actions for this flag and entity combination.
diff --git a/flag.post_update.php b/flag.post_update.php
index bfa7343..9d94d0e 100644
--- a/flag.post_update.php
+++ b/flag.post_update.php
@@ -5,6 +5,8 @@
  * Post update functions for Flag.
  */
 
+use Drupal\system\Entity\Action;
+
 /**
  * Implements hook_post_update_NAME().
  *
@@ -28,3 +30,29 @@ function flag_post_update_flag_relationship_dependencies(&$sandbox) {
     }
   }
 }
+
+/**
+ * Implements hook_post_update_NAME().
+ *
+ * Update the flag and unflag actions for existing flags.
+ */
+function flag_post_update_flag_actions() {
+  /** @var \Drupal\system\Entity\Action[] $actions */
+  $flags = \Drupal::entityTypeManager()->getStorage('flag')->loadMultiple();
+  $action_names = [];
+  foreach ($flags as $flag) {
+    $action_names[] = 'flag_action.' . $flag->id() . '.flag';
+    $action_names[] = 'flag_action.' . $flag->id() . '.unflag';
+  }
+  $actions = Drupal\system\Entity\Action::loadMultiple($action_names);
+  foreach ($actions as $old_id => $action) {
+    if (preg_match('/\.(un)?flag$/', $old_id)) {
+      // Update the plugin ID and the action ID.
+      $new_id = preg_replace('/\.((un)?flag)$/', '_\\1', $old_id);
+      $new_plugin_id = preg_replace('/^flag_action\./', 'flag_action:', $new_id);
+      $action->setPlugin($new_plugin_id);
+      $action->set('id', $new_id);
+      $action->save();
+    }
+  }
+}
diff --git a/src/Plugin/Derivative/EntityFlagActionDeriver.php b/src/Plugin/Derivative/EntityFlagActionDeriver.php
index f0862e0..ff86697 100644
--- a/src/Plugin/Derivative/EntityFlagActionDeriver.php
+++ b/src/Plugin/Derivative/EntityFlagActionDeriver.php
@@ -45,8 +45,8 @@ class EntityFlagActionDeriver extends DeriverBase implements ContainerDeriverInt
   public function getDerivativeDefinitions($base_plugin_definition) {
     foreach ($this->flagService->getAllFlags() as $flag_id => $flag) {
       foreach (['flag', 'unflag'] as $action) {
-        $this->derivatives[$flag_id . '.' . $action] = [
-          'id' => $flag_id . '.' . $action,
+        $this->derivatives[$flag_id . '_' . $action] = [
+          'id' => $flag_id . '_' . $action,
           'label' => $flag->getShortText($action),
           'type' => $flag->getFlaggableEntityTypeId(),
         ] + $base_plugin_definition;
diff --git a/tests/src/Kernel/FlagActionTest.php b/tests/src/Kernel/FlagActionTest.php
index 16bb7c7..5e8f092 100644
--- a/tests/src/Kernel/FlagActionTest.php
+++ b/tests/src/Kernel/FlagActionTest.php
@@ -72,15 +72,15 @@ class FlagActionTest extends FlagKernelTestBase {
     ]);
     $selfies_flag->save();
 
-    $flag_action = $this->entityTypeManager->getStorage('action')->load('flag_action.selfies.flag');
-    $this->assertEquals('flag_action.selfies.flag', $flag_action->id());
-    $unflag_action = $this->entityTypeManager->getStorage('action')->load('flag_action.selfies.unflag');
-    $this->assertEquals('flag_action.selfies.unflag', $unflag_action->id());
+    $flag_action = $this->entityTypeManager->getStorage('action')->load('flag_action.selfies_flag');
+    $this->assertEquals('flag_action.selfies_flag', $flag_action->id());
+    $unflag_action = $this->entityTypeManager->getStorage('action')->load('flag_action.selfies_unflag');
+    $this->assertEquals('flag_action.selfies_unflag', $unflag_action->id());
 
     $selfies_flag->delete();
     $this->entityTypeManager->getStorage('action')->resetCache();
-    $this->assertNull($this->entityTypeManager->getStorage('action')->load('flag_action.selfies.flag'));
-    $this->assertNull($this->entityTypeManager->getStorage('action')->load('flag_action.selfies.unflag'));
+    $this->assertNull($this->entityTypeManager->getStorage('action')->load('flag_action.selfies_flag'));
+    $this->assertNull($this->entityTypeManager->getStorage('action')->load('flag_action.selfies_unflag'));
   }
 
   /**
@@ -102,7 +102,7 @@ class FlagActionTest extends FlagKernelTestBase {
     $test_entity = EntityTest::create();
     $test_entity->save();
     /** @var \Drupal\system\ActionConfigEntityInterface $action */
-    $action = $this->container->get('entity_type.manager')->getStorage('action')->load('flag_action.' . $entity_flag->id() . '.flag');
+    $action = $this->container->get('entity_type.manager')->getStorage('action')->load('flag_action.' . $entity_flag->id() . '_flag');
     $plugin = $action->getPlugin();
     $plugin->execute($test_entity);
     $this->assertTrue($entity_flag->isFlagged($test_entity, $this->account));
@@ -115,7 +115,7 @@ class FlagActionTest extends FlagKernelTestBase {
 
     // Unflag.
     $this->entityTypeManager->getStorage('flagging')->resetCache();
-    $action = $this->entityTypeManager->getStorage('action')->load('flag_action.' . $entity_flag->id() . '.unflag');
+    $action = $this->entityTypeManager->getStorage('action')->load('flag_action.' . $entity_flag->id() . '_unflag');
     $plugin = $action->getPlugin();
     $plugin->execute($test_entity);
     // @todo Flagging cache cannot be cleared, so this check cannot happen.
diff --git a/tests/src/Unit/Plugin/Action/FlagActionTest.php b/tests/src/Unit/Plugin/Action/FlagActionTest.php
index 84ef756..73ce1cb 100644
--- a/tests/src/Unit/Plugin/Action/FlagActionTest.php
+++ b/tests/src/Unit/Plugin/Action/FlagActionTest.php
@@ -54,7 +54,7 @@ class FlagActionTest extends UnitTestCase {
     $flag_service->getFlagById($this->flag->id())->willReturn($this->flag);
     $entity = $this->prophesize(EntityInterface::class)->reveal();
     $flag_service->flag($this->flag, $entity)->shouldBeCalled();
-    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '.flag', [], $flag_service->reveal());
+    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '_flag', [], $flag_service->reveal());
     $plugin->execute($entity);
 
     // Test 'uflag' op.
@@ -66,7 +66,7 @@ class FlagActionTest extends UnitTestCase {
     $flag_service->getFlagById($this->flag->id())->willReturn($this->flag);
     $entity = $this->prophesize(EntityInterface::class)->reveal();
     $flag_service->unflag($this->flag, $entity)->shouldBeCalled();
-    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '.flag', [], $flag_service->reveal());
+    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '_flag', [], $flag_service->reveal());
     $plugin->execute($entity);
   }
 
@@ -93,7 +93,7 @@ class FlagActionTest extends UnitTestCase {
       'flag_id' => $this->flag->id(),
       'flag_action' => 'flag',
     ];
-    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '.flag', [], $flag_service->reveal());
+    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '_flag', [], $flag_service->reveal());
     $this->assertFalse($plugin->access($entity, $account));
     $this->assertEquals($denied, $plugin->access($entity, $account, TRUE));
 
@@ -112,7 +112,7 @@ class FlagActionTest extends UnitTestCase {
       'flag_id' => $this->flag->id(),
       'flag_action' => 'flag',
     ];
-    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '.flag', [], $flag_service->reveal());
+    $plugin = new FlagAction($config, 'flag_action:' . $this->flag->id() . '_flag', [], $flag_service->reveal());
     $this->assertTrue($plugin->access($entity, $account));
     $this->assertEquals($allowed, $plugin->access($entity, $account, TRUE));
   }
