<?php
/**
 * @file: afrikaburn_registration.module
 */

use \Drupal\user\Entity\User;
use \Drupal\node\Entity\Node;
use \Symfony\Component\HttpFoundation\RedirectResponse;
use \Drupal\Core\Url;
use \Drupal\afrikaburn_shared\Controller\QuicketController;
use \Drupal\afrikaburn_shared\Controller\TicketController;


/* ----- Page Hooks ----- */


/**
 * Implements hook_page_attachments()
 * Attach shared script
 */
function afrikaburn_registration_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'afrikaburn_registration/block';
  $page['#attached']['library'][] = 'afrikaburn_registration/print';
}


/* ----- Field Hooks ----- */


/**
 * Implements hook_entity_extra_field_info().
 */
function afrikaburn_registration_entity_extra_field_info() {
  $extra = [];

  $extra['node']['mutant_vehicles']['display']['support_camp'] = array(
    'label' => t('Support Camp'),
    'description' => t('Support Camp'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['mutant_vehicles']['display']['registrant'] = array(
    'label' => t('Registrant'),
    'description' => t('Person who registered the mutant'),
    'weight' => 100,
    'visible' => TRUE,
  );

  return $extra;
}


/* ----- Node Hooks ----- */


/**
 * Implements hook_node_view()
 */
function afrikaburn_registration_node_view(&$build, $entity, $display, $view_mode) {

  $bundle = $entity->bundle();

  switch($bundle){

    case 'art':
    case 'mutant_vehicles':
    case 'performances':
    case 'theme_camps':

      module_load_include('inc', 'afrikaburn_registration', 'includes/form');

      $registration_config = _project_form_config();
      $defaults = @($registration_config)['node_' . $bundle . '_' . $display->get('mode') . '_form'];

      if ($defaults){
        $collective = $entity->field_collective->entity;
        $build['title'] = [
          '#markup' => '<h1 class="page-title">' . _get_title($defaults, $collective, $entity) . '</h1>',
        ];
      }

      if ($view_mode == 'book'){
        module_load_include('inc', 'afrikaburn_registration', 'includes/mutant.book');
        _mutant_titles($build);
        _mutant_support_camp($build, $entity, $display);
        _mutant_registrant($build, $entity, $display);

        foreach(
          [
            'field_prj_trl_size' => 'field_prj_trl_area',
            'field_prj_snd_level' => 'field_prj_snd_sound',
          ]
          as $field => $trigger
        ) isset($build[$field])
          ? $build[$field]['#access'] = $entity->get($trigger)->getValue()[0]['value'] == "1"
          : FALSE;
      }
  }
}


/* ----- Theme hooks ----- */


/**
 * Implements hook_theme().
 * Views Customizaton.
 */
function afrikaburn_registration_theme(){
  return [

    // Collective projects
    'views_view_unformatted__collective_projects' => [
      'template' => 'views-view-unformatted--collective-projects',
      'base hook' => 'view',
    ],
    'views_view_fields__collective_projects' => [
      'template' => 'views-view-fields--collective-projects',
      'base hook' => 'view',
    ],

    // Wrangle

    // Art
    'views_view__wrangle_art' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_art' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_art__guide' => [
      'template' => 'views-view--wrangle--book',
      'base hook' => 'view',
    ],
    // Binnekring Events
    'views_view__wrangle_binnekring_events' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_binnekring_events' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    // Mutant Vehicles
    'views_view__wrangle_mutant_vehicles' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_mutant_vehicles' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles__dmv_book' => [
      'template' => 'views-view--wrangle--book',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles__ranger_book' => [
      'template' => 'views-view--wrangle--book',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles__name_reg_base' => [
      'template' => 'views-view--wrangle-index',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles__reg_name_base' => [
      'template' => 'views-view--wrangle-index',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles__base_name_reg' => [
      'template' => 'views-view--wrangle-index',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles__base_reg_name' => [
      'template' => 'views-view--wrangle-index',
      'base hook' => 'view',
    ],
    // Theme Camps
    'views_view__wrangle_theme_camps' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_theme_camps' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    // WTF
    'views_view__wrangle_wtf' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_wtf' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    // WAPS
    'views_view__wrangle_waps' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_waps' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_vps' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_vps' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    // Comments
    'views_view_fields__wrangle_comments' => [
      'template' => 'views-view-fields--wrangle-comments',
      'base hook' => 'view',
    ],
  ];
}


/* ----- Preprocessing hooks ----- */


/**
 * Implements hook_preprocess_views_view().
 */
function afrikaburn_registration_preprocess_views_view(&$variables){
  switch ($variables['id']){

    case 'collective_projects':
      module_load_include('inc', 'afrikaburn_registration', 'includes/collective.projects');
      ar_prepare_collective_projects($variables);
    break;

    case 'wrangle_art':
    case 'wrangle_binnekring_events':
    case 'wrangle_mutant_vehicles':
      if (in_array($variables['display_id'], ['dmv_book', 'ranger_book', 'guide'])) {
        $variables['view_array']['#attached']['library'][] = 'afrikaburn_registration/book';
      }
    case 'wrangle_theme_camps':
    case 'wrangle_wtf':
      $variables['#attached']['library'][] = 'afrikaburn_registration/wrangle';
      if (in_array($variables['display_id'], ['bench','support_camps', 'tasks', 'assessment', 'engineering'])){
        module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
        ab_prepare_wrangler_view($variables);
      }
    break;

  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function afrikaburn_registration_preprocess_views_view_fields(&$variables) {
  if ($variables['view']->id() == 'collective_projects'){
    module_load_include('inc', 'afrikaburn_registration', 'includes/collective.projects');
    ar_prepare_project_links($variables);
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function afrikaburn_registration_preprocess_views_view_table(&$variables) {

  $comments = TRUE;
  $merge = TRUE;
  $editable = TRUE;

  switch ($variables['view']->id()){
    case 'wrangle_wtf':
      $comments = FALSE;
    case 'wrangle_art':
    case 'wrangle_binnekring_events':
    case 'wrangle_mutant_vehicles':
    case 'wrangle_theme_camps':

      if (in_array($variables['view']->current_display, ['tasks', 'engineering'])) {
        $comments = FALSE;
        $merge = FALSE;
      }

      if (in_array($variables['view']->current_display, ['engineering'])) {
        $editable = FALSE;
      }

      if (in_array($variables['view']->current_display, ['bench', 'support_camps', 'tasks', 'assessment', 'engineering'])){
        module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
        ab_insert_wrangler_view_rows($variables, $comments, $merge, $editable);
      }
    break;
  }
}

/**
 * Implements hook_field_group_pre_render().
 * Sets the js-wizard classes on a form.
 * Hides administrative fieldset from muggles.
 */
function afrikaburn_registration_field_group_pre_render(&$element, &$group, &$form) {

  // Hide empty page sections in book views
  $book_groups = [
    'group_trailer' => 'field_prj_trl_area',
    'group_flames' => 'field_prj_brn_burning',
    'group_night_driving' => 'field_prj_lgh_night',
    'group_sound' => 'field_prj_snd_sound',
  ];
  if (isset($book_groups[$group->group_name]) && isset($form['#node'])) {
    try{
      $trigger = $form['#node']->get($book_groups[$group->group_name]);
    } catch (Exception $e) {
      $trigger = FALSE;
    }
    if ($trigger){
      $form[$group->group_name]['#access'] = $trigger->getValue()[0]['value'] == "1";
    }
  }

  if ($group->group_name == 'group_project_registration' && isset($form['#wizard'])){
    $form['#attributes']['class'][] = 'js-wizard';
  }
  if ($group->group_name == 'group_administrative' && !isset($form['#administrator'])){
    $form['group_administrative']['#access'] = false;
  }
}


/* ---- Local task alter ----- */


/**
 * Implements hook_menu_local_tasks_alter().
 * Hooked to hide edit button.
 */
function afrikaburn_registration_menu_local_tasks_alter(&$data, $route_name){

  module_load_include('inc', 'afrikaburn_registration', 'includes/form');
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node) {
    $bundle = $node->bundle();

    if (@_project_form_modes()[$bundle]){
      unset($data['tabs'][0]['entity.node.edit_form']);
    }
  }
}


/* ---- View alters ----- */


/**
 * Implements hook_views_query_alter().
 * Change "unassigned" wrangler filter into IS NULL in query.
 * Show only users that have not been assigned WAPs in this cycle.
 */
function afrikaburn_registration_views_query_alter($view, $query){

  @list($purpose, $type) = array_map('trim', explode(',', $view->storage->get('tag')));

  // Filter
  if ($purpose && $purpose == 'wrangle' && @$view->exposed_raw_input['wrangler'] == 'unassigned') {

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'node__field_prj_adm_wrangler.field_prj_adm_wrangler_target_id') {
          $condition = [
            'field' => 'field_prj_adm_wrangler_target_id',
            'operator' => 'IS NULL',
          ];
        }
      }
    }
  }
}


/* ----- Form alters ----- */


/**
 * Implements hook_form_alter().
 * Performs project form alterations.
 */
function afrikaburn_registration_form_alter(&$form, $form_state, $form_id) {

  module_load_include('inc', 'afrikaburn_registration', 'includes/form');
  $registration_config = _project_form_config();
  $defaults = @($registration_config)[$form_id];

  if (isset($defaults) && preg_match('/^\/node/', \Drupal::service('path.current')->getPath())) {

    // Get parameters
    list($entity, $user, $registration, $collective, $supporting_project, $is_wrangler, $is_admin, $bundle, $mode) = _get_registration_params($form_state, $defaults);

    // Check access
    _check_access($defaults, $user, $form_state);

    // Catch naughty naughty link faking users
    if (_verify_link($form, $collective, $mode, $supporting_project)) {

      // Set form title, Submit title, Submit handlers
      _set_form_attrs($form, $defaults, $collective, $registration, $mode);

      // Set defaults
      _set_form_defaults($form, $collective, $supporting_project, $defaults, $is_admin, $is_wrangler);

      // Hide fields and inappropriate complete options per type
      _set_form_field_state($form, $is_admin, $is_wrangler, $bundle);

      // Wizard or tabs (cake or death?)
      _set_form_wizard_state($form, $form_state, $defaults, $supporting_project, $registration, $is_wrangler);

      // Generate WAP form
      _wap_form($form, $collective, $registration, $mode);

      // Generate VP form
      _vp_form($form, $collective, $registration, $mode);

      // Generate VP form
      _ddt_form($form, $collective, $registration, $mode);

        // Add "Save Draft" button.
        // $form['draft'] = [
        //   '#type' => 'submit',
        //   '#value' => 'Save Draft',
        //   '#limit_validation_errors' => [['title'], ['field_form_mode']],
        //   '#validate' => ['afrikaburn_registration_validate_draft'],
        //   '#submit' => ['afrikaburn_registration_save_draft'],
        // ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Attach settings form style.
 */
function afrikaburn_registration_form_afrikaburn_registration_settings_alter(&$form, $form_state, $form_id) {
  $form['#attached']['library'][] = 'afrikaburn_registration/settings';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alters dashboard filter form.
 */
function afrikaburn_registration_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  $view = $form_state->getStorage('view')['view'];
  if ($view->storage->get('tag')) @list($purpose, $type) = array_map('trim', explode(',', $view->storage->get('tag')));

  if (isset($purpose) && $purpose == 'wrangle') {

    switch($type){

      // TODO: needs to move to incident module
      case 'logger':
        $form['status']['#options']['All'] = t('- any state -');
        $form['type']['#options']['All'] = t('- any type -');
      break;

      default:
        if (isset($form['tent-size-op'])) $form['tent-size-op']['#prefix'] = '<div>Tent area is</div>';
        $form['tent-size-op']['#title'] = '';
        $form['search']['#placeholder'] = 'project, person or collective';
        $form['status']['#options']['All'] = t('- any review state -');
        module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
        ar_prepare_wrangler_filter($form, $type);
    }
  }
}


/* ----- Form submit handlers ----- */


/**
 * Redirects after saving entity.
 */
function afrikaburn_registration_redirect($form, $form_state){
  $entity = $form_state->getFormObject()->getEntity();
  $mode = $form_state->getValue('field_form_mode')[0]['value'];
  $url = \Drupal\Core\Url::fromUri('internal:/node/' . $entity->id() . '/' . $mode);
  drupal_set_message(
    \Drupal\Core\Render\Markup::create('Well done!
      you may now <a href="javascript:if (window.opener) window.opener.location.href = window.opener.location.href; window.close()">Close this window</a>
      to return to your collective.<br />
      <strong>Check under the "CURRENT PROJECTS" section to manage your project registrations.</strong>'
    ),
    'status'
  );
  $form_state->setRedirectUrl($url);
}

/**
 * Publishes an entity.
 */
function afrikaburn_registration_publish($form, $form_state){
  $form_state->getFormObject()->getEntity()->setPublished(TRUE);
}

/**
 * Marks a support camp as complete on the supported project
 */
function afrikaburn_registration_support($form, $form_state){
  $camp = $form_state->getFormObject()->getEntity();
  $project = array_shift(
    array_filter(
      [
        $camp->field_supporting_project->entity,
        $camp->field_supporting_project->getEntity(),
      ]
    )
  );
  if (!in_array(
    'support_camp',
    array_column($project->field_prjr_complete->getValue(), 'value')
  )){
    $project->field_prjr_complete->appendItem('support_camp');
    $project->save();
  }
}

/* --- WAPS --- */

/**
 * WAPs validation
 */
function afrikaburn_registration_wap_validate($form, $form_state){

  $values = $form_state->getValues();
  $registration = $form_state->getFormObject()->getEntity();
  $allowed = (int)$registration->field_waps_allowed->value;
  $assigned = count($registration->field_waps);
  $new = 0;

  foreach($values['waps'] as $i=>$wap){
    if ($wap['member']){
      if (!$wap['arrives']){
        $form_state->setError($form['waps'][$i]['arrives'], t('You must estimate when this member will arrive!'));
      }
      $new ++;
    }
  }

  if ($allowed < $assigned + $new){
    $form_state->setError($form['waps'], t('You are attempting to assign more WAPs than you are allowed!'));
  }
}

/**
 * WAPs quicket
 */
function afrikaburn_registration_wap_send($form, $form_state){

  if (count($form_state->getErrors())) return;

  $quicket = Drupal::config('afrikaburn_shared.quicket');
  $values = $form_state->getValues();
  $uids = array_filter(array_column($values['waps'], 'member'));
  $users = @User::loadMultiple($uids);
  $waps = [];

  foreach($users as $user){
    $waps[] = [
      'FirstName' => $user->field_first_name->value,
      'Surname' => $user->field_last_name->value,
      'Email' => $user->field_email->value,
    ];
  }

  if (!QuicketController::sendComps($waps, $quicket->get('wap_comp_id'), 1, $quicket->get('wap_id'))){
    $form_state->setError(
      $form,
      t('<strong>Quicket says NO!</strong><br />There was a problem creating these WAPs, please try submitting this form again later.<br /> If the problem persists please <a href="mailto:support@afrikaburn.com">Contact an Administrator</a>!')
    );
  }
}

/**
 * WAPs submission
 */
function afrikaburn_registration_wap_submit($form, $form_state){

  $project = $form_state->getFormObject()->getEntity();
  $values = $form_state->getValues();

  foreach($values['waps'] as $wap){
    if ($wap['member']){

      $paragraph = \Drupal\paragraphs\Entity\Paragraph::create(
        [
          'type' => 'wap',
          'field_team_member' => ['target_id' => $wap['member']],
          'field_estimated_date_of_arrival' => ['value' => $wap['arrives']],
        ]
      );
      $paragraph->save();

      if ($paragraph){
        $project->field_waps->appendItem($paragraph);
      }
    }
  }

  if ($paragraph){
    $project->save();
  }
}


/* --- VPs --- */

/**
 * VPs validation
 */
function afrikaburn_registration_vp_validate($form, $form_state){

  $values = $form_state->getValues();
  $registration = $form_state->getFormObject()->getEntity();
  $allowed = (int)$registration->field_vps_allowed->value;
  $assigned = count($registration->field_vps);
  $new = 0;

  foreach($values['vps'] as $i=>$vp){
    if ($vp['member']){
      $new ++;
    }
  }

  if ($allowed < $assigned + $new){
    $form_state->setError($form['vps'], t('You are attempting to assign more VPs than you are allowed!'));
  }
}

/**
 * VPs quicket
 */
function afrikaburn_registration_vp_send($form, $form_state){

  if (count($form_state->getErrors())) return;

  $quicket = Drupal::config('afrikaburn_shared.quicket');
  $values = $form_state->getValues();
  $uids = array_filter(array_column($values['vps'], 'member'));
  $users = @User::loadMultiple($uids);
  $vps = [];

  foreach($users as $user){
    $vps[] = [
      'FirstName' => $user->field_first_name->value,
      'Surname' => $user->field_last_name->value,
      'Email' => $user->field_email->value,
    ];
  }

  if (!QuicketController::sendComps($vps, $quicket->get('vp_comp_id'), 1, $quicket->get('vp_id'))){
    $form_state->setError(
      $form,
      t('<strong>Quicket says NO!</strong><br />There was a problem creating these VPs, please try submitting this form again later.<br /> If the problem persists please <a href="mailto:support@afrikaburn.com">Contact an Administrator</a>!')
    );
  }
}

/**
 * VPs submission
 */
function afrikaburn_registration_vp_submit($form, $form_state){

  $project = $form_state->getFormObject()->getEntity();
  $values = $form_state->getValues();

  foreach($values['vps'] as $vp){
    if ($vp['member']){

      $paragraph = \Drupal\paragraphs\Entity\Paragraph::create(
        [
          'type' => 'vp',
          'field_team_member' => ['target_id' => $vp['member']],
          'field_estimated_date_of_arrival' => ['value' => $vp['arrives']],
        ]
      );
      $paragraph->save();

      if ($paragraph){
        $project->field_vps->appendItem($paragraph);
      }
    }
  }

  if ($paragraph){
    $project->save();
  }
}


/* --- DDTs --- */

/**
 * DDTs validation
 */
function afrikaburn_registration_ddt_validate($form, $form_state){

  $values = $form_state->getValues();
  $registration = $form_state->getFormObject()->getEntity();
  $allowed = (int)$registration->field_ddts_allowed->value;
  $assigned = count($registration->field_ddts);
  $new = 0;

  foreach($values['ddts'] as $i=>$ddt){
    if ($ddt['member']){
      $new ++;
    }
  }

  if ($allowed < $assigned + $new){
    $form_state->setError($form['ddts'], t('You are attempting to assign more DDTs than you are allowed!'));
  }
}

/**
 * DDTs quicket
 */
function afrikaburn_registration_ddt_send($form, $form_state){

  if (count($form_state->getErrors())) return;

  $values = $form_state->getValues();
  $successes = [];

  foreach($values['ddts'] as $ddt){
    if ($ddt['member']){

      $user = User::load($ddt['member']);

      try{

        TicketController::addTickets($user, ['main_ddt_id']);
        $user->save();
        $successes[] = $ddt;

      } catch (\Exception $e) {
        $user_view = \Drupal::entityTypeManager()
          ->getViewBuilder('user')
          ->view($user, 'full_name');

        drupal_set_message(
          t(
            'There was a problem creating a DDT for: @user
            Please try submitting
            this form again later.<br /> If the problem persists please
            <a href="mailto:support@afrikaburn.com">Contact an Administrator</a>.',
            ['@user' => render($user_view)]
          ),
          'error'
        );
      }
    }
  }

  $form_state->setValue('assigned_ddts', $successes);
}

/**
 * DDTs submission
 */
function afrikaburn_registration_ddt_submit($form, $form_state){

  $project = $form_state->getFormObject()->getEntity();
  $values = $form_state->getValues();

  foreach($values['assigned_ddts'] as $ddt){
    if ($ddt['member']){

      $paragraph = \Drupal\paragraphs\Entity\Paragraph::create(
        [
          'type' => 'ddt',
          'field_team_member' => ['target_id' => $ddt['member']],
          'field_estimated_date_of_arrival' => ['value' => $ddt['arrives']],
        ]
      );
      $paragraph->save();

      if ($paragraph){
        $project->field_ddts->appendItem($paragraph);
      }
    }
  }

  if ($paragraph){
    $project->save();
  }
}


/* ----- Computed fields ----- */


/**
 * Implements hook_entity_presave().
 * Force calculation of year cycle and mutant registration.
 */
function afrikaburn_registration_node_presave($entity){
  if ($entity) {

    // Year cycle
    if (in_array($entity->bundle(), ['art', 'performances', 'mutant_vehicles', 'theme_camps'])){
      if (!count($entity->get('field_year_cycle')->getValue())){
        module_load_include('module', 'afrikaburn_shared', 'afrikaburn_shared');
        $entity->set('field_year_cycle', computed_field_field_year_cycle_compute(null, $entity, null, null));
      }
    }

    // Registration number
    if ($entity->bundle() == 'mutant_vehicles' && !$entity->get('field_prj_adm_registration')->value){
      $prefix = date('ymd');
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'mutant_vehicles')
        ->condition('field_prj_adm_registration', $prefix . '%', 'like')
        ->sort('field_prj_adm_registration', 'DESC');
      $nids = $query->execute();
      if (count($nids)){
        $last = \Drupal::entityTypeManager()->getStorage('node')->load(array_shift($nids))->get('field_prj_adm_registration')->value;
        $lettering = substr($last, strlen($lettering) - 1);
        if ($lettering == 'Z') {
          $entity->set('field_prj_adm_registration', $prefix . 'ZA');
        } else {
          $entity->set('field_prj_adm_registration', $prefix . chr(ord($lettering) + 1));
        }
      } else {
        $entity->set('field_prj_adm_registration', $prefix . 'A');
      }
    }
  }
}

