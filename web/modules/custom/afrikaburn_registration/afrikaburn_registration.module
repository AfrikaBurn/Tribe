<?php
/**
 * @file: afrikaburn_registration.module
 */

use \Drupal\user\Entity\User;


/* ----- Form alters ----- */


/**
 * Implements hook_form_alter().
 */
function afrikaburn_registration_form_alter(&$form, $form_state, $form_id) {

  module_load_include('inc', 'afrikaburn_registration', 'includes/form');
  $registration_config = _project_form_config();
  $defaults = @($registration_config)[$form_id];

  if (isset($defaults)){

    $user = User::load(\Drupal::currentUser()->id());
    $is_wrangler = $user->hasRole($defaults['wrangler']);
    $is_admin = $user->hasRole('administrator');
    $is_complete = array_search($defaults['mode'], $form['field_prjr_complete']['widget']['#default_value']) !== FALSE;
    $is_new = $defaults['mode'] == 'new';

    // Get collective and existing registration
    $registration = \Drupal::routeMatch()->getParameter('node');
    $collective = _get_collective($registration);

    // Naughty naughty users
    if (!$collective) {
      drupal_set_message('Oops! You really should do that from within a collective', 'warning', true);
      $response = new Symfony\Component\HttpFoundation\RedirectResponse(\Drupal::url('<front>'));
      $response->send();
    }

    // Set title
    $form['#title'] = [
      '#type' => 'markup',
      '#markup' => _get_title($defaults, $collective, $registration),
    ];

    // Attach library
    $form['#attached']['library'][] = 'afrikaburn_registration/registration';

    // Hide fields
    $form['revision_log']['#access'] = $is_admin;
    $form['field_form_mode']['#type'] = 'hidden';
    $form['field_collective']['#access'] = $is_admin;
    if (!($is_wrangler || $is_admin)) $form['field_prjr_complete']['widget']['#type'] = 'hidden';

    // Hide inappropriate complete options per type
    $bundle = $form_state->getFormObject()->getEntity()->bundle();
    $form['field_prjr_complete']['widget']['#options'] = array_intersect_key(
      $form['field_prjr_complete']['widget']['#options'],
      array_flip(_project_form_modes()[$bundle]['modes'])
    );

    // Set defaults
    $form['field_collective']['widget'][0]['target_id']['#default_value'] = $collective;
    $form['field_form_mode']['widget'][0]['value']['#default_value'] = $registration
      ? $defaults['mode']
      : 'new';
    if (!$is_wrangler) $form['field_prjr_complete']['widget']['#default_value'][] = $defaults['mode'];
    $form['#administrator'] = $is_admin || $is_wrangler;

    // Wizard or tabs (cake or death?)
    $form['#wizard'] = $is_new || $defaults['mode'] != 'edit' && ($incomplete || !$is_wrangler);
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Attach settings form style.
 */
function afrikaburn_registration_form_afrikaburn_registration_settings_alter(&$form, $form_state, $form_id) {
  $form['#attached']['library'][] = 'afrikaburn_registration/settings';
}


/**
 * Implements hook_field_group_pre_render().
 */
function afrikaburn_registration_field_group_pre_render(&$element, &$group, &$form) {
  if ($group->group_name == 'group_project_registration' && $form['#wizard']){
    $form['#attributes']['class'][] = 'js-wizard';
  }
  if ($group->group_name == 'group_administrative' && !$form['#administrator']){
    $form['group_administrative']['#attributes']['class'][] = 'hidden';
  }
}

/**
 * Implements hook_theme().
 */
function afrikaburn_registration_theme(){
  return [
    'views_view_unformatted__collective_projects' => [
      'template' => 'views-view-unformatted--collective-projects',
      'base hook' => 'view'
    ],
    'views_view_fields__collective_projects' => [
      'template' => 'views-view-fields--collective-projects',
      'base hook' => 'view'
    ],
  ];
}

/**
 * Implements hook_preprocess_views_view().
 * Adds form states to collective projects view.
 */
function afrikaburn_registration_preprocess_views_view(&$variables){
  if ($variables['id'] == 'collective_projects'){

    $view = $variables['view'];

    $view->group_admin = Drupal\afrikaburn_collective\Access\CollectiveAdminCheck::isAdmin(
      \Drupal::currentUser()->id(),
      node_load($view->argument['field_collective_target_id']->value[0])
    );

    module_load_include('inc', 'afrikaburn_registration', 'includes/form');

    $settings = \Drupal::config('afrikaburn_registration.settings');

    foreach(_project_form_modes() as $key=>$map){

      $modes = $map['modes'];

      foreach($modes as $mode=>$mode_title){

        $state = array_keys(array_filter($settings->get($key . '/' . $mode)));
        $state = array_combine($state, $state);

        $variables['view']->form_modes[$key][$mode] = [
          'title' => $mode_title,
          'name' => $mode,
          'state' => $state,
        ];
      }
    }
  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 * Constructs project links.
 */
function afrikaburn_registration_preprocess_views_view_fields(&$variables) {

  $view = $variables['view'];
  $id = $view->id();
  $display = $view->current_display;

  if ($id == 'collective_projects' && in_array($display, ['current_block', 'past_block'])){

    $nid = $variables['row']->nid;
    $registration = \Drupal::entityTypeManager()->getStorage('node')->load($nid);
    $type = $registration->get('type')->getValue()[0]['target_id'];
    $completed = array_column($registration->get('field_prjr_complete')->getValue(), 'value');
    $completed = array_combine($completed, $completed);
    $links = false;

    if ($display == 'current_block'){

      foreach($view->form_modes[$type] as $mode){
        if ($mode['state']['visible']) {

          $editable = $mode['state']['editable'] && $view->group_admin;
          $complete = $completed[$mode['name']];

          switch (true){
            case $editable && !$complete:
            $status = 'warning';
            $description = 'TODO: Needs completion.';
            break;
            case
            $editable && $complete: $status = 'status';
            $description = 'DONE: Still editable.';
            break;
            default:
            $status = 'lock';
            $description = 'LOCKED: Read only.';
          }

          $link = (
            $editable
              ? '<a href="/node/' . $nid . '/edit/' . $mode['name'] . '" title="'. $description .'">' . $mode['title'] . '</a>'
              : '<a href="/node/' . $nid . '/' . $mode['name'] . '" title="'. $description .'">' . $mode['title'] . '</a>'
          );

          $links[] = '<li class="messages messages--' . $status . '">' . $link . '</li>';
        }
      }

    } else {

      foreach($view->form_modes[$type] as $mode){
        $links[] = '<li class="messages messages--archive"><a href="/node/' . $nid . '/' . $mode['name'] . '" title="ARCHIVED: Read only.">' . $mode['title'] . '</a></li>';
      }

      if ($view->form_modes[$type]['form_1']['state']['open']){
        $links[] = '<li class="messages messages--recycle"><a href="/node/' . $nid . '/' . $mode['name'] . '" title="Make a copy of this registration for submission.">Reuse this registration</a></li>';
      }
    }

    $variables['links'] = $links;
  }

}