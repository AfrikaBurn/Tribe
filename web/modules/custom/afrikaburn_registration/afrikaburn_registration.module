<?php
/**
 * @file: afrikaburn_registration.module
 */

use \Drupal\user\Entity\User;
use \Drupal\node\Entity\Node;


module_load_include('inc', 'afrikaburn_registration', 'includes/project.wizard');
// module_load_include('inc', 'afrikaburn_registration', 'includes/project.draft');


/* ----- Form alters ----- */


/**
 * Implements hook_form_alter().
 * Performs project form alterations.
 */
function afrikaburn_registration_form_alter(&$form, $form_state, $form_id) {

  module_load_include('inc', 'afrikaburn_registration', 'includes/form');
  $registration_config = _project_form_config();
  $defaults = @($registration_config)[$form_id];

  // dpm($form_id);

  if (isset($defaults)){

    $user = User::load(\Drupal::currentUser()->id());
    $registration = array_filter(
      [
        $form_state->getFormObject()->getEntity(),
        \Drupal::routeMatch()->getParameter('node'),
      ]
    )[0];
    $collective = _get_collective($registration);

    $is_wrangler = $user->hasRole($defaults['wrangler']);
    $is_admin = $user->hasRole('administrator');
    $is_complete = array_search($defaults['mode'], $form['field_prjr_complete']['widget']['#default_value']) !== FALSE;
    $is_new = !isset($registration);

    // Naughty naughty users
    if (!$collective) {
      drupal_set_message('Oops! You really should do that from within a collective', 'warning', true);
      $response = new Symfony\Component\HttpFoundation\RedirectResponse(\Drupal::url('<front>'));
      $response->send();
    }

    // The little things
    $form['#title'] = [
      '#type' => 'markup',
      '#markup' => _get_title($defaults, $collective, $registration),
    ];
    $form['actions']['submit']['#value'] = 'Submit';
    $form['#attached']['library'][] = 'afrikaburn_registration/registration';

    // Hide fields and inappropriate complete options per type
    $form['revision_log']['#access'] = $is_admin;
    $form['field_form_mode']['#type'] = 'hidden';
    $form['field_collective']['#access'] = $is_admin;
    if (!($is_wrangler || $is_admin)) $form['field_prjr_complete']['widget']['#type'] = 'hidden';
    $bundle = $form_state->getFormObject()->getEntity()->bundle();
    $form['field_prjr_complete']['widget']['#options'] = array_intersect_key(
      $form['field_prjr_complete']['widget']['#options'],
      _project_form_modes()[$bundle]['modes']
    );

    // Set defaults
    $form['field_collective']['widget'][0]['target_id']['#default_value'] = $collective;
    $form['field_form_mode']['widget'][0]['value']['#default_value'] = $defaults['mode'];
    if (!$is_wrangler) $form['field_prjr_complete']['widget']['#default_value'][] = $defaults['mode'];
    $form['#administrator'] = $is_admin || $is_wrangler;

    // Wizard or tabs (cake or death?)
    $form['#wizard'] = $is_new || $defaults['mode'] != 'edit' && ($incomplete || !$is_wrangler);

    // // Add "Save Draft" button.
    // $form['draft'] = [
    //   '#type' => 'submit',
    //   '#value' => 'Save Draft',
    //   '#limit_validation_errors' => [['title'], ['field_form_mode']],
    //   '#validate' => ['afrikaburn_registration_validate_draft'],
    //   '#submit' => ['afrikaburn_registration_save_draft'],
    // ];
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Attach settings form style.
 */
function afrikaburn_registration_form_afrikaburn_registration_settings_alter(&$form, $form_state, $form_id) {
  $form['#attached']['library'][] = 'afrikaburn_registration/settings';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alters dashboard filter form.
 */
function afrikaburn_registration_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  $view = $form_state->getStorage('view')['view'];
  list($purpose, $type) = @array_map('trim', explode(',', $view->storage->get('tag')));

  if ($purpose == 'wrangle') {
    $form['search']['#placeholder'] = 'project, person or collective';
    $form['status']['#options']['All'] = t('- any review state -');
    module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
    ar_prepare_wrangler_filter($form, $type);
  }
}


/* ---- View alters ----- */


/**
 * Implements hook_views_query_alter().
 * Change "unassigned" wrangler filter into IS NULL in query.
 */
function afrikaburn_registration_views_query_alter($view, $query){

  @list($purpose, $type) = array_map('trim', explode(',', $view->storage->get('tag')));

  if ($purpose == 'wrangle' && $view->exposed_raw_input['wrangler'] == 'unassigned') {

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'node__field_prj_adm_wrangler.field_prj_adm_wrangler_target_id') {
          $condition = [
            'field' => 'field_prj_adm_wrangler_target_id',
            'operator' => 'IS NULL',
          ];
        }
      }
    }

  }
}


/* ----- Theme hooks ----- */


/**
 * Implements hook_theme().
 * Views Customizaton.
 */
function afrikaburn_registration_theme(){
  return [

    // Collective projects
    'views_view_unformatted__collective_projects' => [
      'template' => 'views-view-unformatted--collective-projects',
      'base hook' => 'view',
    ],
    'views_view_fields__collective_projects' => [
      'template' => 'views-view-fields--collective-projects',
      'base hook' => 'view',
    ],

    // Wrangle
    'views_view__wrangle_art' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_art' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_binnekring_events' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_binnekring_events' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_mutant_vehicles' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_theme_camps' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_theme_camps' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],

    'views_view_fields__wrangle_comments' => [
      'template' => 'views-view-fields--wrangle-comments',
      'base hook' => 'view',
    ],

  ];
}


/* ----- Preprocessing hooks ----- */


/**
 * Implements hook_preprocess_views_view().
 */
function afrikaburn_registration_preprocess_views_view(&$variables){
  switch ($variables['id']){

    case 'collective_projects':
      module_load_include('inc', 'afrikaburn_registration', 'includes/collective.projects');
      ar_prepare_collective_projects($variables);
    break;

    case 'wrangle_art':
    case 'wrangle_binnekring_events':
    case 'wrangle_mutant_vehicles':
    case 'wrangle_theme_camps':
      $variables['#attached']['library'][] = 'afrikaburn_registration/wrangle';
      module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
      ab_prepare_wrangler_view($variables);
    break;

  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function afrikaburn_registration_preprocess_views_view_fields(&$variables) {
  switch ($variables['view']->id()){

    case 'collective_projects':
      module_load_include('inc', 'afrikaburn_registration', 'includes/collective.projects');
      ar_prepare_project_links($variables);
    break;

  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function afrikaburn_registration_preprocess_views_view_table(&$variables) {
  switch ($variables['view']->id()){

    case 'wrangle_art':
    case 'wrangle_binnekring_events':
    case 'wrangle_mutant_vehicles':
    case 'wrangle_theme_camps':
      module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
      ab_insert_wrangler_view_rows($variables);
    break;

  }
}


/* ----- Computed fields ----- */


/**
 * Computes event year cycle
 */
function computed_field_field_year_cycle_compute($entity_type_manager, $entity, $fields, $delta){
  return date('Y', strtotime('+8 months', $entity->get('created')->value));
}

/**
 * Implements hook_entity_presave().
 * Force calculation of year cycle.
 */
function afrikaburn_registration_node_presave($entity){
  if (in_array($entity->bundle(), ['art', 'performances', 'mutant_vehicles', 'theme_camps'])){
    if (!count($entity->get('field_year_cycle')->getValue())){
      $entity->set('field_year_cycle', computed_field_field_year_cycle_compute(null, $entity, null, null));
    }
  }
}


/* ----- Emails ----- */


function afrikaburn_registration_mail_alter(&$message){

  $node = \Drupal::routeMatch()->getParameter('node');
  $bundle = $node ? $node->bundle() : FALSE;

  if (in_array($bundle, ['art', 'mutant_vehicles', 'performances', 'theme_camps'])){

    $template = $message['params']['message'];
    preg_match_all('/\[' . $bundle . ':(?<mode>[^\[]+)\]/', $message['params']['message'], $renderings);

    foreach ($renderings['mode'] as $index=>$mode){

      if (!$rendered[$mode]){
        $rendered[$mode] = render(
          \Drupal::entityTypeManager()
            ->getViewBuilder('node')
            ->view($node, $mode)
        );
      }

      $template = str_replace($renderings[0][$index], $rendered[$mode], $template);
    }

    $message['body'] = [];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['body'][] = _afrikaburn_registration_email_images($message, $template);
  }
}


// Replace images in email
function _afrikaburn_registration_email_images(&$message, $body){

  $patterns = array(
    '/"(image:[^"]+)"/',
    '/src="(\/[^"]+\.gif[^"]*)"/',
    '/src="(\/[^"]+\.jpg[^"]*)"/',
    '/src="(\/[^"]+\.png[^"]*)"/',
    '/src="(\/[^"]+\.GIF[^"]*)"/',
    '/src="(\/[^"]+\.JPG[^"]*)"/',
    '/src="(\/[^"]+\.PNG[^"]*)"/',
  );

  $processed_images = array();
  foreach ($patterns as $pattern) {
    $embeddable_images = array();
    preg_match_all($pattern, $body, $embeddable_images);
    for ($i = 0; $i < count($embeddable_images[1]); $i++) {
      $raw = $embeddable_images[1][$i];
      $image_uri = trim(str_replace('/system/files', 'private:/', $raw));

      if (!isset($processed_images[$image_uri])) {
        $image_path = preg_replace('/^(image:|\/)+/', '', $image_uri);
        $image_name = basename($image_path);

        $image = new stdClass();
        $image->uri = $image_path;
        $image->filename = $image_name;
        $image->filemime = \Drupal::service('file.mime_type.guesser')->guess($image_path);
        $image->cid = preg_replace('/[^0-9a-zA-Z]|\?.+$/', '', $raw);

        $message['params']['images'][] = $image;
        $body = str_replace($raw, 'cid:' . $image->cid, $body);
        $processed_images[$image_uri] = 1;
      }
    }
  }

  return $body;
}