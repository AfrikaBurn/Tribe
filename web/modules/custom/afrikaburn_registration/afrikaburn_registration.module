<?php
/**
 * @file: afrikaburn_registration.module
 */

use \Drupal\user\Entity\User;
use \Drupal\node\Entity\Node;


module_load_include('inc', 'afrikaburn_registration', 'includes/project.wizard');
// module_load_include('inc', 'afrikaburn_registration', 'includes/project.draft');


/**
 * Attach shared script
 */
function afrikaburn_registration_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'afrikaburn_registration/block';
  $page['#attached']['library'][] = 'afrikaburn_registration/print';
}


/* ----- Form alters ----- */


/**
 * Implements hook_form_alter().
 * Performs project form alterations.
 */
function afrikaburn_registration_form_alter(&$form, $form_state, $form_id) {

  module_load_include('inc', 'afrikaburn_registration', 'includes/form');
  $registration_config = _project_form_config();
  $defaults = @($registration_config)[$form_id];

  if (isset($defaults) && preg_match('/^\/node/', \Drupal::service('path.current')->getPath())) {

    $entity = $form_state->getFormObject()->getEntity();
    $user = User::load(\Drupal::currentUser()->id());
    $registration = array_filter(
      [
        $entity,
        \Drupal::routeMatch()->getParameter('node'),
      ]
    )[0];
    $collective = _get_collective($registration);
    $supporting_project = _get_supporting_project($registration);
    $is_wrangler = $user->hasRole($defaults['wrangler']);
    $is_admin = $user->hasRole('administrator');
    $bundle = $entity->bundle();
    $mode = array_pop(explode('/', \Drupal::service('path.current')->getPath()));

    // Naughty naughty users
    if (!$collective || ($mode == 'support_camp' && !$supporting_project)) {
      drupal_set_message('Oops! You really should do that using the links in a collective', 'warning', true);
      $response = new Symfony\Component\HttpFoundation\RedirectResponse(\Drupal::url('<front>'));
      $response->send();

      $form['#title'] = [
        '#type' => 'markup',
        '#markup' => _get_title($defaults, $collective, $registration),
      ];

    } else {

      // Form title, Submit title, Submit handler
      $form['#title'] = [
        '#type' => 'markup',
        '#markup' => _get_title($defaults, $collective, $registration),
      ];
      $form['actions']['submit']['#value'] = 'Submit';
      array_unshift($form['actions']['submit']['#submit'], 'afrikaburn_registration_publish');
      $form['actions']['submit']['#submit'][] = 'afrikaburn_registration_redirect';

      if ($mode == 'support_camp'){
        $form['actions']['submit']['#submit'][] = 'afrikaburn_registration_support';
      }

      // Set defaults
      $form['field_collective']['widget'][0]['target_id']['#default_value'] = $collective;
      $form['field_supporting_project']['widget'][0]['target_id']['#default_value'] = $supporting_project;
      $form['field_form_mode']['widget'][0]['value']['#default_value'] = $defaults['mode'];
      $form['field_prjr_complete']['widget']['#default_value'][] = $defaults['mode'];
      $form['#administrator'] = $is_admin || $is_wrangler;

      // Hide fields and inappropriate complete options per type
      $form['revision_log']['#access'] = $is_admin;
      $form['field_form_mode']['#type'] = 'hidden';
      $form['field_collective']['#access'] = $is_admin;
      $form['field_prjr_complete']['widget']['#options'] = array_intersect_key(
        $form['field_prjr_complete']['widget']['#options'],
        _project_form_modes()[$bundle]['modes']
      );
      if (!($is_wrangler || $is_admin)) $form['field_prjr_complete']['widget']['#type'] = 'value';

      // Wizard or tabs (cake or death?)
      $incomplete = array_search(
        $defaults['mode'],
        $defaults['mode'] == 'support_camp'
          ? array_column($registration->field_supporting_project->entity->field_prjr_complete->getValue(), 'value')
          : array_column($registration->field_prjr_complete->getValue(), 'value')
      ) === FALSE;
      $existing = isset($registration->nid->value);
      $errors = count($form_state->getErrors()) > 0;
      $form['#wizard'] = !$is_wrangler && (!$existing || $incomplete) || $errors;

        // !$is_wrangler && (
        //   ($is_new && !$errors) ||
        //   ($incomplete && !$errors)
        // );

        // Add "Save Draft" button.
        // $form['draft'] = [
        //   '#type' => 'submit',
        //   '#value' => 'Save Draft',
        //   '#limit_validation_errors' => [['title'], ['field_form_mode']],
        //   '#validate' => ['afrikaburn_registration_validate_draft'],
        //   '#submit' => ['afrikaburn_registration_save_draft'],
        // ];
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Attach settings form style.
 */
function afrikaburn_registration_form_afrikaburn_registration_settings_alter(&$form, $form_state, $form_id) {
  $form['#attached']['library'][] = 'afrikaburn_registration/settings';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alters dashboard filter form.
 */
function afrikaburn_registration_form_views_exposed_form_alter(&$form, $form_state, $form_id) {

  $view = $form_state->getStorage('view')['view'];
  if ($view->storage->get('tag')) list($purpose, $type) = array_map('trim', explode(',', $view->storage->get('tag')));

  if (isset($purpose) && $purpose == 'wrangle') {

    switch($type){

      // TODO: needs to move to incident module
      case 'logger':
        $form['status']['#options']['All'] = t('- any state -');
        $form['type']['#options']['All'] = t('- any type -');
      break;

      default:
        $form['search']['#placeholder'] = 'project, person or collective';
        $form['status']['#options']['All'] = t('- any review state -');
        module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
        ar_prepare_wrangler_filter($form, $type);
    }
  }
}


/* ---- Locat task alter ----- */


/**
 * Implements hook_menu_local_tasks_alter().
 * Hooked to hide edit button.
 */
function afrikaburn_registration_menu_local_tasks_alter(&$data, $route_name){

  module_load_include('inc', 'afrikaburn_registration', 'includes/form');
  $node = \Drupal::routeMatch()->getParameter('node');

  if ($node) {
    $bundle = $node->bundle();

    if (@_project_form_modes()[$bundle]){
      unset($data['tabs'][0]['entity.node.edit_form']);
    }
  }
}


/* ---- View alters ----- */


/**
 * Implements hook_views_query_alter().
 * Change "unassigned" wrangler filter into IS NULL in query.
 */
function afrikaburn_registration_views_query_alter($view, $query){

  @list($purpose, $type) = array_map('trim', explode(',', $view->storage->get('tag')));

  if ($purpose && $purpose == 'wrangle' && $view->exposed_raw_input['wrangler'] == 'unassigned') {

    foreach ($query->where as &$condition_group) {
      foreach ($condition_group['conditions'] as &$condition) {
        if ($condition['field'] == 'node__field_prj_adm_wrangler.field_prj_adm_wrangler_target_id') {
          $condition = [
            'field' => 'field_prj_adm_wrangler_target_id',
            'operator' => 'IS NULL',
          ];
        }
      }
    }
  }
}


/* ----- Theme hooks ----- */


/**
 * Implements hook_theme().
 * Views Customizaton.
 */
function afrikaburn_registration_theme(){
  return [

    // Collective projects
    'views_view_unformatted__collective_projects' => [
      'template' => 'views-view-unformatted--collective-projects',
      'base hook' => 'view',
    ],
    'views_view_fields__collective_projects' => [
      'template' => 'views-view-fields--collective-projects',
      'base hook' => 'view',
    ],

    // Wrangle
    'views_view__wrangle_art' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_art' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_binnekring_events' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_binnekring_events' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_mutant_vehicles' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_mutant_vehicles' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view__wrangle_theme_camps' => [
      'template' => 'views-view--wrangle',
      'base hook' => 'view',
    ],
    'views_view_table__wrangle_theme_camps' => [
      'template' => 'views-view-table--wrangle-projects',
      'base hook' => 'view',
    ],
    'views_view_fields__wrangle_comments' => [
      'template' => 'views-view-fields--wrangle-comments',
      'base hook' => 'view',
    ],
  ];
}


/* ----- Preprocessing hooks ----- */


/**
 * Implements hook_preprocess_views_view().
 */
function afrikaburn_registration_preprocess_views_view(&$variables){
  switch ($variables['id']){

    case 'collective_projects':
      module_load_include('inc', 'afrikaburn_registration', 'includes/collective.projects');
      ar_prepare_collective_projects($variables);
    break;

    case 'wrangle_art':
    case 'wrangle_binnekring_events':
    case 'wrangle_mutant_vehicles':
    case 'wrangle_theme_camps':
      $variables['#attached']['library'][] = 'afrikaburn_registration/wrangle';
      module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
      ab_prepare_wrangler_view($variables);
    break;

  }
}

/**
 * Implements hook_preprocess_views_view_fields().
 */
function afrikaburn_registration_preprocess_views_view_fields(&$variables) {
  if ($variables['view']->id() == 'collective_projects'){
    module_load_include('inc', 'afrikaburn_registration', 'includes/collective.projects');
    ar_prepare_project_links($variables);
  }
}

/**
 * Implements hook_preprocess_views_view_table().
 */
function afrikaburn_registration_preprocess_views_view_table(&$variables) {
  switch ($variables['view']->id()){

    case 'wrangle_art':
    case 'wrangle_binnekring_events':
    case 'wrangle_mutant_vehicles':
    case 'wrangle_theme_camps':
      module_load_include('inc', 'afrikaburn_registration', 'includes/wrangle.projects');
      ab_insert_wrangler_view_rows($variables);
    break;

  }
}


/* ----- Form submit handlers ----- */


/**
 * Redirects after saving entity.
 */
function afrikaburn_registration_redirect($form, $form_state){
  $entity = $form_state->getFormObject()->getEntity();
  $mode = $form_state->getValue('field_form_mode')[0]['value'];
  $url = \Drupal\Core\Url::fromUri('internal:/node/' . $entity->id() . '/' . $mode);
  drupal_set_message(
    \Drupal\Core\Render\Markup::create('Well done!
      you may now <a href="javascript:if (window.opener) window.opener.location.href = window.opener.location.href; window.close()">Close this window</a>
      to return to your collective and
      <ul>
        <li>Apply for a grant</li>
        <li>Register another project</li>
      </ul>
      <strong>Check under the "CURRENT PROJECTS" section to manage your project registrations.</strong>'
    ),
    'status'
  );
  $form_state->setRedirectUrl($url);
}

/**
 * Publishes an entity.
 */
function afrikaburn_registration_publish($form, $form_state){
  $form_state->getFormObject()->getEntity()->setPublished(TRUE);
}

/**
 * Marks a support camp as complete on the supported project
 */
function afrikaburn_registration_support($form, $form_state){
  $camp = $form_state->getFormObject()->getEntity();
  $project = array_shift(
    array_filter(
      [
        $camp->field_supporting_project->entity,
        $camp->field_supporting_project->getEntity(),
      ]
    )
  );
  if (!in_array(
    'support_camp',
    array_column($project->field_prjr_complete->getValue(), 'value')
  )){
    $project->field_prjr_complete->appendItem('support_camp');
    $project->save();
  }
}


/* ----- Computed fields ----- */


/**
 * Computes event year cycle
 */
function computed_field_field_year_cycle_compute($entity_type_manager, $entity, $fields, $delta){
  return date('Y', strtotime('+8 months', $entity->get('created')->value));
}

/**
 * Implements hook_entity_presave().
 * Force calculation of year cycle and mutant registration.
 */
function afrikaburn_registration_node_presave($entity){
  if ($entity) {

    // Year cycle
    if (in_array($entity->bundle(), ['art', 'performances', 'mutant_vehicles', 'theme_camps'])){
      if (!count($entity->get('field_year_cycle')->getValue())){
        $entity->set('field_year_cycle', computed_field_field_year_cycle_compute(null, $entity, null, null));
      }
    }

    // Registration number
    if ($entity->bundle() == 'mutant_vehicles' && !$entity->get('field_prj_adm_registration')->value){
      $prefix = date('ymd');
      $query = \Drupal::entityQuery('node')
        ->condition('type', 'mutant_vehicles')
        ->condition('field_prj_adm_registration', $prefix . '%', 'like')
        ->sort('field_prj_adm_registration', 'DESC');
      $nids = $query->execute();
      if (count($nids)){
        $last = \Drupal::entityTypeManager()->getStorage('node')->load(array_shift($nids))->get('field_prj_adm_registration')->value;
        $lettering = substr($last, strlen($lettering) - 1);
        if ($lettering == 'Z') {
          $entity->set('field_prj_adm_registration', $prefix . 'ZA');
        } else {
          $entity->set('field_prj_adm_registration', $prefix . chr(ord($lettering) + 1));
        }
      } else {
        $entity->set('field_prj_adm_registration', $prefix . 'A');
      }
    }
  }
}

