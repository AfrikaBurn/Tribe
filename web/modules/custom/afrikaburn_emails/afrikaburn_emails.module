<?php

/**
 * @file
 * Contains Afrikaburn Emails module.
 */

use Drupal\Core\Entity\EntityInterface;
use Drupal\Core\Mail\MailManagerInterface;
use Drupal\Component\Utility\SafeMarkup;
use Drupal\Component\Utility\Html;
use Drupal\smtp\Plugin\Mail;
use Drupal\Core\Url;

/**
 * Implements hook_form_alter().
 */
function afrikaburn_emails_form_alter(&$form, $form_state, $form_id) {
  // Remember form mode for sending emails
  if (isset($form['field_form_mode'])){
    $current_path = \Drupal::service('path.current')->getPath();
    $path_args = explode('/', $current_path);
    $mode = array_pop($path_args);
    $form['field_form_mode']['widget'][0]['value'] = [
      '#type' => 'hidden',
      '#default_value' => $mode,
    ];
  }
}

/**
 * Implements hook_entity_insert().
 */
function afrikaburn_emails_entity_insert($entity){
  _afrikaburn_emails_notify($entity, 'create');
}

/**
 * Implements hook_entity_update().
 */
function afrikaburn_emails_entity_update($entity){
  _afrikaburn_emails_notify($entity, 'update');
}

/**
 * Implements hook_mail().
 */
function afrikaburn_emails_mail($key, &$message, $params) {
  if ($key === 'ab_notification') {
    $message['from'] = \Drupal::config('system.site')->get('mail');
    $message['subject'] = $params['subject'];
    $message['headers']['bcc'] = $params['bcc'];
    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['headers']['MIME-Version'] = '1.0';

    $message['body'][] = strip_tags(str_replace(['<br />'], "\n", $params['message']));
    _afrikaburn_emails_images($message, $params['message']);
  }
}

// --- Message utilities

/**
 * Sends emails to notify users of actions
 * @param  [object] $entity Entity object being operated on
 * @param  [string] $action Action being performed
 */
function _afrikaburn_emails_notify($entity, $action){

  $token_service = \Drupal::token();
  $configs = _afrikaburn_emails_get_config($entity, $action);

  if ($configs) {
    foreach($configs as $config){

      $recipients = _afrikaburn_emails_addresses($entity, $config['recipients']);
      if (count($recipients)) {

        $recipient_string = implode(', ', $recipients);

        $template = $config['template'];
        $entity_build = strpos('[rendered]', $template) >= 0
          ? entity_view($entity, 'notification')
          : false;
        $rendered = $entity_build
          ? render($entity_build)
          : false;
        $message = $rendered
          ? str_replace(
            '[rendered]',
            $rendered,
            $template
          )
          : $template;
        $message = \Drupal::token()->replace(
          $message,
          [$config['key'][2] => $entity],
          ['clear' => true]
        );
        $subject = \Drupal::token()->replace(
          $config['subject'], [$config['key'][2] => $entity]
        );
        $result = \Drupal::service('plugin.manager.mail')->mail(
          'afrikaburn_emails',
          'ab_notification',
          t('Undisclosed recipients') . '<shared@afrikaburn.com>',
          \Drupal::currentUser()->getPreferredLangcode(),
          [
            'subject' => $subject,
            'message' => $message,
            'bcc' => $recipient_string,
          ],
          NULL,
          TRUE
        );

        $result['result']
          ? \Drupal::logger('mail-log')->notice('Mail sent to ' . $recipient_string . "\n" . $subject . "\n:" . $message)
          : \Drupal::logger('mail-log')->notice('Mail send FAILED to ' . $recipient_string . "\n" . $subject . "\n:" . $message);
      } else {
        \Drupal::logger('mail-log')->notice('No recipients to send "' . $config['subject'] . '" email to');
      }
    }
  }
}

// Replace links in email
function _afrikaburn_emails_links($body){
  $links = [];
  $root = \Drupal::request()->getSchemeAndHttpHost();
  preg_match_all('/href="(\/[^"]+)"/', $body, $links);
  foreach ($links[1] as $link){
    // $body = str_replace($link, $root . $link, $body);
  }
  return $body;
}

// Replace images in email
function _afrikaburn_emails_images(&$message, $body){

  $patterns = array(
    '/"(image:[^"]+)"/',
    '/src="(\/[^"]+\.gif[^"]*)"/',
    '/src="(\/[^"]+\.jpg[^"]*)"/',
    '/src="(\/[^"]+\.png[^"]*)"/',
    '/src="(\/[^"]+\.GIF[^"]*)"/',
    '/src="(\/[^"]+\.JPG[^"]*)"/',
    '/src="(\/[^"]+\.PNG[^"]*)"/',
  );

  $processed_images = array();
  foreach ($patterns as $pattern) {
    $embeddable_images = array();
    preg_match_all($pattern, $body, $embeddable_images);
    for ($i = 0; $i < count($embeddable_images[1]); $i++) {
      $raw = $embeddable_images[1][$i];
      $image_uri = trim(str_replace('/system/files', 'private:/', $raw));

      if (!isset($processed_images[$image_uri])) {
        $image_path = preg_replace('/^(image:|\/)+/', '', $image_uri);
        $image_name = basename($image_path);

        $image = new stdClass();
        $image->uri = $image_path;
        $image->filename = $image_name;
        $image->filemime = \Drupal::service('file.mime_type.guesser')->guess($image_path);
        $image->cid = preg_replace('/[^0-9a-zA-Z]|\?.+$/', '', $raw);

        $message['params']['images'][] = $image;
//        $body = str_replace($raw, 'cid:' . $image->cid, $body);
        $processed_images[$image_uri] = 1;
      }
    }
  }

  return $body;
}

// --- Recipient utilities

/**
 * Retrieves all recipients for a notification
 * @param  [object] $entity       Entity object being operated on
 * @param  [string] $recipients   Comma delimited string of recipient types
 * @return [array]                Array of email addresses
 */
function _afrikaburn_emails_addresses($entity, $recipients){

  $addresses = [];

  foreach(explode(',', $recipients) as $recipient){
    $recipient = trim($recipient);
    if (in_array($recipient, ['author', 'group', 'invitees', 'new_invitees'])) {
      $function = '_afrikaburn_emails_recipient_' . $recipient;
      $addresses += $function($entity);
    } else {
      $addresses[$recipient] = $recipient;
    }
  }

  return $addresses;
}

/**
 * Retrieves an author email address
 * @param  [object] $entity   Entity object being operated on
 * @return [array]            Array of email addresses
 */
function _afrikaburn_emails_recipient_author($entity){
  switch($entity->getEntityType()->id()){
    case 'user': $mail = $entity->getEmail(); return $mail ? [$mail => $mail] : [];
    case 'node': $mail = $entity->getOwner()->getEmail(); return $mail ? [$mail => $mail] : [];
    default: return [];
  }
}

/**
 * Retrieves a list of group member email addresses
 * @param  [object] $entity       Entity object being operated on
 * @return [array]            Array of email addresses
 */
function _afrikaburn_emails_recipient_group($entity){

  $members = [];
  $addresses = [];

  $field_collective = $entity->get('field_collective');
  if ($field_collective) {
    $collective = $field_collective->first();

    if ($collective) {
      $members = $collective
        ->get('entity')
        ->getTarget()
        ->get('field_col_members')
        ->referencedEntities();
      foreach ($members as $member) {
        $email = $member->getEmail();
        $addresses[$email] = $email;
      }
    }
  }

  return $addresses;
}

/**
 * Retrieves a list of group member email addresses
 * @param  [object] $entity       Entity object being operated on
 * @return [array]            Array of email addresses
 */
function _afrikaburn_emails_recipient_invitees($entity){

  $invitees = [];
  $addresses = [];
  $field_col_invitee = $entity->get('field_col_invitee');

  if ($field_col_invitee){
    $invitees = array_column(
      $field_col_invitee->getValue(),
      'value'
    );
    if (is_array($invitees)){
      $addresses = array_combine($invitees, $invitees);
    }
  }

  return $addresses;
}

/**
 * Retrieves a list of group member email addresses
 * @param  [object] $entity   Entity object being operated on
 * @return [array]            Array of email addresses
 */
function _afrikaburn_emails_recipient_new_invitees($entity){

  $originals = [];
  $newbs = [];

  $original = $entity->original;
  if ($original) {
    $field_col_invitee = $original->get('field_col_invitee');
    if ($field_col_invitee) {
      $value = $field_col_invitee->getValue();
      if ($value) {
        $originals = array_column(
          $entity->original
            ->get('field_col_invitee')
            ->getValue(),
          'value'
        );
      }
    }
  }

  $field_col_invitee = $entity->get('field_col_invitee');
  if ($field_col_invitee) {
    $value = $field_col_invitee->getValue();
    if ($value) {
      $newbs = array_column(
        $value,
        'value'
      );
    }
  }

  return array_diff($newbs, $originals);
}

// --- Config Utilities

/**
 * Retrieves the messaging configuration for an entity/action pair
 * @param  [object] $entity Entity object being operated on
 * @param  [string] $action Action being performed
 * @return [array|FALSE] configuration or FALSE if non-existent
 */
function _afrikaburn_emails_get_config($entity, $action){

  $config = \Drupal::config('afrikaburn_emails.settings');
  $message_definition = $config->get('message_definition');
  $target_key = _afrikaburn_emails_message_key($entity, $action);
  $matches = [];

  preg_match_all("/^[^\:]*\:" . $target_key . "(\:[^\|]*)?\|.*$/m", $message_definition, $matches);

  $configs = FALSE;
  foreach($matches[0] as $match){
    if (substr_count($match, '|') == 2) {
      list($key, $subject, $recipient) = explode('|', trim($match));
      $key_parts = explode(':', $key);
      try{

        $check_mode = isset($key_parts[4]) && $entity->hasField('field_form_mode');
        $matched = $check_mode
          ? $key_parts[4] == $entity->get('field_form_mode')->getValue()[0]['value']
          : TRUE;

        if ($matched){
          $configs[] = [
            'key' => $key_parts,
            'subject' => $subject,
            'template' => $config->get($key_parts[0]),
            'recipients' => $recipient,
          ];
        }
      } catch (Exception $e) {
        \Drupal::logger('afrikaburn_emails')->notice(var_export($e, TRUE));
      }
    }
  }

  return $configs;
}

/**
 * Constructs a message key
 * @param  [object] $entity Entity object being operated on
 * @param  [string] $action Action being performed
 * @return [string]         Constructed configuration key
 */
function _afrikaburn_emails_message_key($entity, $action){

  $parts = [
    $action,
    $entity->getEntityTypeId(),
    $entity->bundle(),
  ];

  return implode(':', array_filter($parts));
}
