<?php

/**
 * @file Contains afrikaburn notification module.
 */

use \Drupal\user\Entity\User;
use \Drupal\afrikaburn_shared\Utils;


/* ----- Entity hooks ----- */


/**
 * Implements hook_ENTITY_TYPE_insert.
 */
function afrikaburn_notification_user_insert($user){
  module_load_include('inc', 'afrikaburn_notification', 'includes/account');
  _notify_account($user);
}

/**
 * Implements hook_ENTITY_TYPE_insert.
 */
function afrikaburn_notification_user_delete($user){
  module_load_include('inc', 'afrikaburn_notification', 'includes/account');
  _notify_delete($user);
}

/**
 * Implements hook_ENTITY_TYPE_insert.
 * Notify users on
 */
function afrikaburn_notification_node_insert($node){

  $bundle = $node->bundle();

  if ($node->isPublished() && in_array($bundle, ['art', 'performances', 'mutant_vehicles', 'theme_camps'])){
    module_load_include('inc', 'afrikaburn_notification', 'includes/registration');
    _notify_registration($node);
  }

  if ($bundle == 'collective'){
    module_load_include('inc', 'afrikaburn_notification', 'includes/collective');
    _notify_collective($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_update.
 * Notify users on updates.
 */
function afrikaburn_notification_node_update($node){

  $bundle = $node->bundle();

  if ($node->isPublished() && in_array($bundle, ['art', 'performances', 'mutant_vehicles', 'theme_camps', 'collective'])){

    module_load_include('inc', 'afrikaburn_notification', 'includes/util');

    $diff = Utils::diff($node);

    // Don't mail while wrangling or on no changes
    if (
      preg_match('/^\/registration\/update/', \Drupal::service('path.current')->getPath()) ||
      !$diff
    ) return;

    afrikaburn_notification_node_insert($node);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert.
 * Notify users on new collective invite.
 */
function afrikaburn_notification_flagging_insert($flagging){
  if ($flagging->bundle() == 'invite'){

    $settings = \Drupal::config('afrikaburn_notification.settings');

    if ($settings->get('collective-invitation-update-invitees-enabled')) {

      module_load_include('inc', 'afrikaburn_notification', 'includes/util');

      $address_settings = \Drupal::config('afrikaburn_notification.address_settings');
      $collective = $flagging->flagged_entity->entity;
      $invitee = $flagging->uid->entity->mail->value;

      $accept = \Drupal::request()->getSchemeAndHttpHost() . '/collective/' . $collective->id() . '/accept';
      $ignore = \Drupal::request()->getSchemeAndHttpHost() . '/collective/' . $collective->id() . '/ignore';
      $body = str_replace(
        ['[accept]', '[ignore]'],
        [$accept, $ignore],
        $settings->get("collective-invitation-update-invitees-body")
      );

      _notify(
        'no-reply@afrikaburn.com',
        $settings->get('collective-label'), $address_settings->get('collective-address'),
        $invitee . ', ' . $address_settings->get('archive'),
        $settings->get("collective-invitation-update-invitees-subject"),
        $body,
        $collective
      );
    }
  }
}

/**
 * Implements hook_ENTITY_TYPE_update.
 * Notify users on repeat collective invite.
 */
function afrikaburn_notification_flagging_update($flagging){
  if ($flagging->bundle() == 'invite'){

    $settings = \Drupal::config('afrikaburn_notification.settings');

    if ($settings->get('collective-invitation-new-invitees-enabled')) {

      module_load_include('inc', 'afrikaburn_notification', 'includes/util');

      $address_settings = \Drupal::config('afrikaburn_notification.address_settings');
      $collective = $flagging->flagged_entity->entity;
      $invitee = $flagging->uid->entity->mail->value;

      $accept = \Drupal::request()->getSchemeAndHttpHost() . '/collective/' . $collective->id() . '/accept';
      $ignore = \Drupal::request()->getSchemeAndHttpHost() . '/collective/' . $collective->id() . '/ignore';
      $body = str_replace(
        ['[accept]', '[ignore]'],
        [$accept, $ignore],
        $settings->get("collective-invitation-new-invitees-body")
      );

      _notify(
        'no-reply@afrikaburn.com',
        $settings->get('collective-label'), $address_settings->get('collective-address'),
        $invitee . ', ' . $address_settings->get('archive'),
        $settings->get("collective-invitation-new-invitees-subject"),
        $body,
        $collective
      );
    }
  }
}


/**
 * Implements hook_ENTITY_TYPE_insert.
 * Notify users on
 */
function afrikaburn_notification_paragraph_insert($paragraph){

  $bundle = $paragraph->bundle();

  if ($paragraph->isPublished() && in_array($bundle, ['ddt', 'vp', 'wap'])){
    module_load_include('inc', 'afrikaburn_notification', 'includes/allocation');
    _notify_allocation($paragraph);
  }
}

/**
 * Implements hook_ENTITY_TYPE_insert.
 * Notify users on posts.
 */
function afrikaburn_notification_comment_insert($comment){

  $bundle = $comment->bundle();

  if ($bundle == 'post'){

    module_load_include('inc', 'afrikaburn_notification', 'includes/util');
    module_load_include('inc', 'afrikaburn_notification', 'includes/post');

    $collective = $comment->entity_id->entity;
    $meta_collective = _meta_collective($collective);
    $address_settings = \Drupal::config('afrikaburn_notification.address_settings');

    _notify_post($comment, $meta_collective, $address_settings);
  }
}


/* ----- Mail hooks ----- */


/**
 * Implements hook_mail().
 * Replaces render, node and user tokens
 */
function afrikaburn_notification_mail($key, &$message, $params) {

  $node = $params['node'];

  if ($key == 'afrikaburn_notification'){

    $user = User::load(\Drupal::currentUser()->id());
    $tokens = ['node' => $node, 'user' => $user];

    $subject = $params['subject'];
    $message['body'] = [];
    $body = $params['message'];

    _entity_render($node, $body);
    _entity_diff($node, $body);
    _email_images($message, $body);

    $body = \Drupal::token()->replace($body, $tokens, ['clear' => true]);
    $subject = \Drupal::token()->replace($subject, $tokens, ['clear' => true]);

    $message['headers']['Content-Type'] = 'text/html; charset=UTF-8; format=flowed; delsp=yes';
    $message['headers']['bcc'] = $params['bcc'];

    $message['headers']['from'] = $params['from'];
    $message['headers']['reply-to'] = $params['from'];

    $message['subject'] = $subject;
    $message['body'][] = $body;

  }
}
