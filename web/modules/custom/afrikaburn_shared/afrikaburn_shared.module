<?php

/**
 * @file
 * Contains Afrikaburn Shared module.
 */


use Drupal\views\Plugin\views\join;


/* ---- System hooks ---- */


/**
 * Implements hook_user_login().
 * Hooked to redirect users to the home page
 */
function afrikaburn_shared_user_login($account){
  if (\Drupal::service('path.current')->getPath() == '/user/login'){
    $response = new Symfony\Component\HttpFoundation\RedirectResponse(\Drupal::url('<front>'));
    $response->send();
  }
}


/* ---- Page hooks ---- */


/**
 * Imlements hook_page_attachments.
 * Attach shared script
 */
function afrikaburn_shared_page_attachments(array &$page) {
  $page['#attached']['library'][] = 'afrikaburn_shared/shared';
  $page['#attached']['library'][] = 'afrikaburn_shared/wizard';
  $page['#attached']['library'][] = 'afrikaburn_shared/wrangle';
  $page['#attached']['drupalSettings']['widthBreakpoint'] = 1;
}


/* ---- Computed fields ---- */


/**
 * Implements computed_field_FIELD_NAME_compute.
 * Computes event year cycle
 */
function computed_field_field_year_cycle_compute($entity_type_manager, $entity, $fields, $delta){

  $next = strtotime(Drupal\Core\Site\Settings::get('afrikaburn.cycle')['end']);
  $year_end = strtotime('31 dec ' . date('Y'));
  $offset = ($year_end - $next) / 86400;
  $year = date('Y', strtotime('+' . $offset .' days', $entity->get('created')->value));

  return $year;
}

/**
 * Implements computed_field_FIELD_NAME_compute.
 * Computes pretty content type lables for API.
 */
function computed_field_field_api_content_type_compute($entity_type_manager, $entity, $fields, $delta){

  switch ($entity->bundle()) {
    case "theme_camps":
      if ($entity->field_event_services->value == TRUE) {
        $value="Event Service";
      } else {
        $value="Theme Camp";
      }
      break;
    case "art":
      $value="Artwork";
      break;
    case "collective":
      $value="Collective";
      break;
    case "performances":
      $value="Binnekring Event";
      break;
    case "mutant_vehicles":
      $value="Mutant Vehicle";
      break;
    default:
      $value="not set" + implode( ", ", $entity->bundle());
      break;
  }
  return $value;
}


