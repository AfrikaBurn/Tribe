<?php

/**
 * @file
 * Contains Afrikaburn Shared module.
 */


use \Drupal\Core\Form\FormStateInterface;
use \Drupal\Core\Entity\EntityInterface;
use \Drupal\Core\Entity\Display\EntityViewDisplayInterface;
use \Drupal\user\Entity\User;
use Drupal\Core\Access\AccessResult;
use Drupal\Core\Cache\Cache;

use \Drupal\afrikaburn_collective\Controller\CollectiveController;
use \Drupal\afrikaburn_collective\Controller\PrivacyController;
use \Drupal\afrikaburn_shared\Utils;


/* ----- Page hooks ----- */


/**
 * Implements hook_page_attachments().
 * Attach collective libraries.
 */
function afrikaburn_collective_page_attachments(&$page) {
  $page['#attached']['library'][] = 'afrikaburn_collective/main';
}


/* ----- Entity hooks ----- */


/**
 * Implements hook_ENTITY_insert().
 * Add new users to the AfrikaBurn group.
 */
function afrikaburn_collective_user_insert($user){

  if (!$user->uid->value) return;

  $cid = @array_shift(
    \Drupal::entityQuery('node')
      ->condition('type', 'collective')
      ->condition('title', 'AfrikaBurn')
      ->execute()
  );

  if ($cid){
    $collective = \Drupal::entityTypeManager()->getStorage('node')->load($cid);
    CollectiveController::set('member', $collective, $user);
    CollectiveController::clear('invite', $collective, $user);
  }
}

/**
 * Implements hook_ENTITY_insert().
 * Add author as a member and admin of new collectives.
 */
function afrikaburn_collective_node_insert($node){
  if ($node->bundle() == 'collective'){

    $user = User::load(\Drupal::currentUser()->id());

    foreach(['member', 'admin'] as $fid){
      CollectiveController::set('member', $node, $user);
      CollectiveController::set('admin', $node, $user);
    }
  }
}

/**
 * Implements hook_ENTITY_insert().
 * Invalidates user cache on privacy change.
 */
function afrikaburn_collective_flagging_insert($flagging) {
  if (in_array($flagging->bundle(), ['disclose', 'admin', 'member'])){
    Cache::invalidateTags(
      [
        'user:' . $flagging->uid->target_id,
        'collective:' . $flagging->entity_id->value,
      ]
    );
  }
}

/**
 * Implements hook_ENTITY_insert().
 * Invalidates user cache on privacy change.
 */
function afrikaburn_collective_flagging_update($flagging) {
  afrikaburn_collective_flagging_insert($flagging);
}

/**
 * Implements hook_ENTITY_insert().
 * Invalidates user cache on privacy change.
 */
function afrikaburn_collective_flagging_delete($flagging) {
  afrikaburn_collective_flagging_insert($flagging);
}

/**
 * Implements hook_entity_extra_field_info().
 * Defines extra 'pseudo fields' for collective and user views.
 */
function afrikaburn_collective_entity_extra_field_info() {
  $extra = array();

  // Collective fields

  $extra['node']['collective']['display']['post_something'] = array(
    'label' => t('Post form'),
    'description' => t('Form to create a post'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['posts'] = array(
    'label' => t('Posts'),
    'description' => t('View of the latest posts'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['edit'] = array(
    'label' => t('Edit collective'),
    'description' => t('Link to edit collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['leave'] = array(
    'label' => t('Leave collective'),
    'description' => t('Link to leave a collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['join'] = array(
    'label' => t('Join collective'),
    'description' => t('Link to join a collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['invited'] = array(
    'label' => t('Invitation indicator'),
    'description' => t('Indication of an invitation to a collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['accept'] = array(
    'label' => t('Accept invitation to join'),
    'description' => t('Link to accept invitation to a collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['ignore'] = array(
    'label' => t('Ignore invitation to join'),
    'description' => t('Link to ignore invitation to a collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  $extra['node']['collective']['display']['request'] = array(
    'label' => t('Request to join'),
    'description' => t('Link to request to join a collective'),
    'weight' => 100,
    'visible' => TRUE,
  );

  return $extra;
}

/**
 * Implements hook_ENTITY_TYPE_view().
 * Builds collective post / comment forms
 * Builds collective action links
 */
function afrikaburn_collective_node_view(&$build, $entity, $display, $view_mode) {

  if ($entity->bundle() == 'collective'){

    module_load_include('inc', 'afrikaburn_collective', 'includes/view');

    $nid = $entity->id();
    $uid = \Drupal::currentUser()->id();
    $user = User::load($uid);

    $admin = CollectiveController::isAdmin($entity, $user, TRUE);
    $member = CollectiveController::isMember($entity, $user, TRUE);
    $sys_admin = CollectiveController::isAdmin($entity, $user);
    $sys_member = CollectiveController::isMember($entity, $user);

    _build_post_form($build, $display, $uid, $nid, $sys_admin, $sys_member);
    _build_post_view($build, $display, $uid, $nid, $sys_admin, $sys_member);
    _build_join($build, $display, $uid, $nid, $admin, $member);
    _build_request($build, $display, $uid, $nid, $admin, $member);
    _build_accept($build, $display, $uid, $nid, $admin, $member);
    _build_invited($build, $display, $uid, $nid, $admin, $member);
    _build_ignore($build, $display, $uid, $nid, $admin, $member);
    _build_leave($build, $display, $uid, $nid, $admin, $member);
    _build_edit($build, $display, $uid, $nid, $sys_admin, $sys_member);
  }
}


/* ----- Access hooks ----- */


/**
 * Implements hook_entity_field_access.
 * Enforces user privacy by checking field access.
 */
function afrikaburn_collective_entity_field_access($op, $definition, $user, $items){

  $subject = $items ? $items->getParent()->getEntity() : FALSE;

  if (

    $subject && $subject->id() != $user->id() &&
    $definition instanceOf Drupal\field\Entity\FieldConfig &&
    $definition->get('entity_type') == 'user' &&
    $op == 'view' &&

    in_array(
      $definition->get('field_name'),
      [
        'user_picture',
        'field_first_name',
        'field_last_name',
        'field_date_of_birth',
        'field_email',
        'field_mobile',
        'field_location',
      ]
    )
  ){

    return

      count(
        array_intersect(
          $user->getAccount()->getRoles(),
          [
            'administrator',
            'art_wrangler',
            'mutant_vehicle_wrangler',
            'theme_camp_wrangler',
            'communications_wrangler',
            'support_wrangler',
          ]
        )
      ) || in_array(
        $definition->get('field_name'),
        PrivacyController::maySee($user, $subject)['all']
      )
    ? AccessResult::neutral()
    : AccessResult::forbidden();
  }

  return AccessResult::neutral();
}

/**
 * Implements hook_node_access.
 * Implemented to enforce collective access.
 */
function afrikaburn_collective_node_access($collective, $op, $user){
  if ($collective->bundle() == 'collective'){

    $user = User::load($user->id());

    return (
      $user->id() > 0 &&
      CollectiveController::setting($collective, 'public') ||
      CollectiveController::isMember($collective, $user) ||
      CollectiveController::isInvited($collective, $user)
    )
      ? AccessResult::neutral()
      : AccessResult::forbidden();
  }

  return AccessResult::neutral();
}


/* ----- Theme hooks ----- */


/**
 * Implements hook_theme().
 * Views Customizaton.
 */
function afrikaburn_collective_theme(){
  return [

    'views_view_fields__collective_posts' => [
      'template' => 'views-view-fields--collective-posts',
      'base hook' => 'view',
    ],

    'views_view_fields__collective_members' => [
      'template' => 'views-view-fields--collective-members',
      'base hook' => 'view',
    ],

    'user__listing' => [
      'template' => 'user--listing',
      'base hook' => 'user',
    ],
  ];
}


/* ----- Form Alters ----- */


/**
 * Implements hook_form_alter().
 * Hide inappropriate elements on collective form,
 * Add unique name validation.
 * Change privacy flagging form title
 */
function afrikaburn_collective_form_alter(&$form, $form_state, $form_id) {

  if (preg_match('/^node_collective/', $form_id)) {
    $user = User::load(\Drupal::currentUser()->id());
    $form['field_col_admins']['#access'] = false;
    $form['field_col_members']['#access'] = false;
    $form['field_col_requests']['#access'] = false;
    $form['field_col_invite_mail']['#access'] = $user->hasRole('administrator');
    $form['field_col_invite_token']['#access'] = $user->hasRole('administrator');
    $form['field_settings']['widget']['#title'] = '';
    $form['#validate'][] = 'afrikaburn_collective_unique_name';
  }

  if (preg_match('/^flagging_disclose/', $form_id)) {
    $form['#title'] = [
      '#type' => 'markup',
      '#markup' =>
        ($form_id == 'flagging_disclose_add_form' ? 'Share my information' : 'My information shared').
        ' <div class="subtitle">With members of the ' .
        \Drupal::entityTypeManager()->getStorage('node')->load(
          \Drupal::routeMatch()->getParameter('entity_id')
        )->title->value .
      ' Collective</div>',
    ];
    $form['#attached']['library'][] = 'afrikaburn_collective/privacy';
  }
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Fixes comment form bug
 */
function afrikaburn_collective_form_comment_comment_form_alter(&$form, $form_state, $form_id){
  $form['pid'] = [
    '#name' => 'pid',
    '#type' => 'hidden',
  ];
  $form['actions']['submit']['#value'] = t('Say it!');
  $form['actions']['submit']['#submit'][] = 'afrikaburn_collective_comment_redirect';
}

/**
 * Implements hook_form_FORM_ID_alter()
 * Fixes comment form bug
 */
function afrikaburn_collective_form_comment_post_form_alter(&$form, $form_state, $form_id){
  $form['actions']['submit']['#submit'][] = 'afrikaburn_collective_post_redirect';
}

/**
 * Implements hook_form_FORM_ID_alter().
 * Alters public collective view form.
 */
function afrikaburn_collective_form_views_exposed_form_alter(&$form, $form_state, $form_id) {
  $view = $form_state->getStorage('view')['view']->storage;
  if ($view->get('id') == "collectives_browse"){
    $form['options']['#type'] = 'checkboxes';
  }

  $form['collective']['#attributes']['autocomplete'] = 'off';
  $form['combine']['#attributes']['autocomplete'] = 'off';
}


/* ----- Validators ----- */


/**
 * Enforce unique collective name
 */
function afrikaburn_collective_unique_name(&$form, $form_state){

  $values = $form_state->getValues();
  $editing = $form_state->getformObject()->getEntity();
  $query = \Drupal::entityQuery('node')
    ->condition('type', 'collective')
    ->condition('title', $values['title'][0]['value']);
  $nids = $query->execute();

  if (
    (
      count($nids) > 1 ||
      count($nids) && array_shift($nids) != $editing->id()
    ) && $values['title'][0]['value'] == 'AfrikaBurn'
  ){
    $form_state->setError($form['title']['widget'][0]['value'], t('There can be only one AfrikaBurn Collective!'));
  }
}


/* ----- Submission handlers ----- */


/**
 * Redirects after posting
 */
function afrikaburn_collective_post_redirect(&$form, $form_state){

  $path = [];
  preg_match(
    '/node\/([0-9]+)/',
    \Drupal::service('path.current')->getPath(),
    $path
  );
  if (count($path)){
    \Drupal::request()->query->remove('destination');
    $form_state->setRedirect(
      'entity.node.canonical',
      ['node' => $path[1]],
      []
    );
  }
}

/**
 * Redirects after commenting
 */
function afrikaburn_collective_comment_redirect(&$form, $form_state){

  $path = [];
  preg_match(
    '/node\/([0-9]+)/',
    \Drupal::service('path.current')->getPath(),
    $path
  );

  $post = \Drupal::request()->query->get('post');
  $comment = $form_state->getFormObject()->getEntity();

  if (count($path)){
    \Drupal::request()->query->remove('destination');
    $form_state->setRedirect(
      'entity.node.canonical',
      ['node' => $path[1]],
      [
        'query' => [
          'post' => $post ? $post : 'all'
        ],
        'fragment' => 'comment-' . $comment->cid->value,
      ]
    );
  }
}


/* ----- Views hooks ----- */


/**
 * Implements hook_views_query_alter().
 * Limit view to only list members
 * (users that have flagged the collective with the member flag)
 */
function afrikaburn_collective_views_query_alter($view, $query) {
  if ($view->id() == 'collective_member_select'){

    $current = Utils::currentCollective();

    $cid = @array_shift(
      array_filter(
        [
          \Drupal::request()->query->get('field_collective'),
          @$view->args[0],
          $current ? $current->id() : FALSE,
        ]
      )
    );

    if ($cid){
      $query->addRelationship(
        'flagging',
         \Drupal\views\Views::pluginManager('join')->createInstance(
          'standard',
          [
            'table' => 'flagging',
            'field' => 'uid',
            'left_table' => 'users_field_data',
            'left_field' => 'uid',
            'operator' => '='
          ]
        ),
        'users_field_data'
      );

      $query->addWhere(0, 'flagging.flag_id', 'member', '=');
      $query->addWhere(0, 'flagging.entity_id', $cid, '=');
    } else {
      $query->addWhere(0, 'uid', 0, '<');
    }
  }
}


/* ----- Preprocessors ----- */


/**
 * Implements hook_preprocess_views_view_fields().
 * Add links to admin users to member views.
 * Add reply form to post views.
 */
function afrikaburn_collective_preprocess_views_view_fields(&$variables) {

  $view = $variables['view'];

  if (in_array($view->id(), ['collective_members', 'collective_posts'])){

    module_load_include('inc', 'afrikaburn_collective', 'includes/util');
    module_load_include('inc', 'afrikaburn_collective', 'includes/view');

    $user = Utils::currentUser();

    $member = $variables['row']->_relationship_entities['uid'];
    $collective = \Drupal::entityTypeManager()->getStorage('node')->load(
      $variables['view']->args[0]
    );

    if (
      $view->id() == 'collective_members' &&
      in_array($view->current_display, ['members', 'admins', 'requests', 'banned'])
    ){
      _user_admin_links($variables, $collective, $user, $member);
      $variables["display"] = PrivacyController::maySee($user, $member)['all'];
    }

    if (
      $view->id() == 'collective_posts' && $view->current_display == 'posts' &&
      !CollectiveController::isBanned($collective, $user) &&
      (
        CollectiveController::isMember($collective, $user) ||
        !CollectiveController::setting($collective, 'privileged_discussion'))
    ) {
      _reply_form($variables);
      $variables["display"] = PrivacyController::maySee($user, $member)['all'];
    }
  }
}

/**
 * Implements hook_views_views_pre_render().
 */
function afrikaburn_collective_views_pre_render($view) {
  if ($view->storage->id() == 'my_collectives' && $view->current_display == 'joined') {
    if (empty($view->result) && empty($view->getExposedInput())) {
      $view->exposed_widgets = NULL;
    }
  }
}

/**
 * Implements computed_field_field_col_invite_token_compute()
 */
function computed_field_field_col_invite_token_compute($entity_type_manager, $entity, $fields, $delta){
  return $entity;
}