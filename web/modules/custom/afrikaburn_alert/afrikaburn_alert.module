<?php
/**
 * @file
 * Contains Afrikaburn alert module.
 */


use \Drupal\user\Entity\User;
use \Drupal\Core\Access\AccessResult;
use \Drupal\Core\Database\Query\Condition;

use \Drupal\afrikaburn_shared\Utils;
use \Drupal\afrikaburn_alert\Controller\AlertController;
use \Drupal\afrikaburn_collective\Controller\CollectiveController;


/* ----- Page Hooks ----- */


/**
 * Implements hook_page_attachments().
 * Attach bio libraries.
 */
function afrikaburn_alert_page_attachments(&$page) {
  $page['#attached']['library'][] = 'afrikaburn_alert/alert';
}


/* ----- Theme Hooks ----- */


/**
 * Implements hook_theme().
 * Views Customizaton.
 */
function afrikaburn_alert_theme(){
  return [
    'node__alert' => [
      'template' => "node--alert",
      'base hook' => 'node',
    ]
  ];
}

/**
 * Implements HOOK_preprocess_node().
 *
 */
function afrikaburn_alert_preprocess_node(&$variables){
  if ($variables['node']->bundle() == 'alert'){
    module_load_include('inc', 'afrikaburn_alert', 'includes/alert');
    _alert_display_variables($variables);
  }
}


/* ----- Access hooks ----- */


/**
 * Implements hook_flag_action_access().
 */
function afrikaburn_alert_flag_action_access($action, $flag, $account, $collective = NULL) {
  if ($collective->bundle() == 'collective' && $flag->id == 'mute'){

    $user = User::load(\Drupal::currentUser()->id());

    return CollectiveController::isMember($collective, $user, TRUE)
      ? AccessResult::neutral()
      : AccessResult::forbidden();
  }
  return AccessResult::neutral();
}


/* ----- Views hooks ----- */


/**
 * Implements hook_views_query_alter().
 * Add proper where clause
 */
function afrikaburn_alert_views_query_alter($view, $query) {

  if ($view->id() == 'alerts'){

    $current_uid = \Drupal::currentUser()->id();

    $query->addRelationship(
      'action',
       \Drupal\views\Views::pluginManager('join')->createInstance(
        'standard',
        [
          'type' => 'INNER',
          'left_table' => 'node_field_data',
          'left_field' => 'nid',
          'table' => 'node__field_alert_action',
          'field' => 'entity_id',
          'operator' => '=',
        ]
      ),
      'node_field_data'
    );

    $query->addRelationship(
      'user',
       \Drupal\views\Views::pluginManager('join')->createInstance(
        'standard',
        [
          'type' => 'LEFT',
          'left_table' => 'node_field_data',
          'left_field' => 'nid',
          'table' => 'node__field_alert_user',
          'field' => 'entity_id',
          'operator' => '=',
        ]
      ),
      'node_field_data'
    );

    $query->addRelationship(
      'member',
       \Drupal\views\Views::pluginManager('join')->createInstance(
        'standard',
        [
          'type' => 'INNER',
          'left_table' => 'node_field_data_node__field_alert_collective',
          'left_field' => 'nid',
          'table' => 'flagging',
          'field' => 'entity_id',
          'operator' => '=',
          'extra' => [
            ['field' => 'flag_id', 'value' => 'member'],
          ]
        ]
      ),
      'node_field_data'
    );

    $query->addRelationship(
      'admin',
       \Drupal\views\Views::pluginManager('join')->createInstance(
        'standard',
        [
          'type' => 'LEFT',
          'left_table' => 'node_field_data_node__field_alert_collective',
          'left_field' => 'nid',
          'table' => 'flagging',
          'field' => 'entity_id',
          'operator' => '=',
          'extra' => [['field' => 'flag_id', 'value' => 'admin']]
        ]
      ),
      'node_field_data'
    );

    $query->addWhere(0, (new Condition('AND'))
      ->condition('member.uid', $current_uid, '=')
      ->condition((new Condition('OR'))
        ->condition('user.field_alert_user_target_id', $current_uid, '=')
        ->condition('action.field_alert_action_value', range(0, 5), 'IN')
        ->condition((new Condition('AND'))
          ->condition('action.field_alert_action_value', range(6, 11), 'IN')
          ->condition('admin.uid', $current_uid)
        )
      )
    );

    switch ($view->current_display){

      case 'news':

        $query->addRelationship(
          'mute',
          \Drupal\views\Views::pluginManager('join')->createInstance(
            'standard',
            [
              'type' => 'LEFT',
              'left_table' => 'node_field_data_node__field_alert_collective',
              'left_field' => 'nid',
              'table' => 'flagging',
              'field' => 'entity_id',
              'operator' => '=',
              'extra' => [['field' => 'flag_id', 'value' => 'mute']]
            ]
          ),
          'node_field_data'
        );

        $query->addRelationship(
          'readit',
          \Drupal\views\Views::pluginManager('join')->createInstance(
            'standard',
            [
              'type' => 'LEFT',
              'left_table' => 'node_field_data',
              'left_field' => 'nid',
              'table' => 'flagging',
              'field' => 'entity_id',
              'operator' => '=',
              'extra' => [['field' => 'flag_id', 'value' => 'read']]
            ]
          ),
          'node_field_data'
        );

        $query->addWhere(0, (new Condition('AND'))
          ->isNull('mute.uid')
          ->isNull('readit.uid')
        );
      break;

      case 'activity':
        $query->addWhere(0, (new Condition('OR'))
          ->condition('node_field_data.uid', $current_uid, '=')
          ->condition('user.field_alert_user_target_id', $current_uid, '=')
        );
      break;

      case 'bookmarks':

        $query->addRelationship(
          'bookmark',
          \Drupal\views\Views::pluginManager('join')->createInstance(
            'standard',
            [
              'type' => 'LEFT',
              'left_table' => 'node_field_data',
              'left_field' => 'nid',
              'table' => 'flagging',
              'field' => 'entity_id',
              'operator' => '=',
              'extra' => [['field' => 'flag_id', 'value' => 'bookmark']]
            ]
          ),
          'node_field_data'
        );

        $query->addWhereExpression(1, 'bookmark.uid IS NOT NULL');
        break;
    }

    $query->addWhereExpression(1, 'node_field_data.created >= member.created');
  }
}


/* ----- Alert generation ----- */


/* --- Projects --- */

/**
 * Implements hook_ENTITY_TYPE_insert.
 * Generate alerts when projects are created.
 */
function afrikaburn_alert_node_insert($node){
  switch ($node->bundle()) {

    case 'art':
    case 'performances':
    case 'mutant_vehicles':
    case 'theme_camps':

      $wrangling = preg_match(
        '/^\/registration\/update/',
        \Drupal::service('path.current')->getPath()
      );
      $updated = Utils::diff($node);
      $new = !isset($node->original);

      if ($new || $updated && !$wrangling) {
        AlertController::alert(
          AlertController::$ACTION_CREATE,
          _getCollective($node),
          $node
        );
      }

    break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_update.
 * Generate alerts when projects are updated.
 */
function afrikaburn_alert_node_update($node){
  switch ($node->bundle()) {

    case 'art':
    case 'performances':
    case 'mutant_vehicles':
    case 'theme_camps':

      AlertController::alert(
        AlertController::$ACTION_UPDATE,
        _getCollective($node),
        $node
      );

    break;
  }
}

/**
 * Implements hook_ENTITY_TYPE_predelete.
 * Generate alerts when project is deleted.
 */
function afrikaburn_alert_node_predelete($node){
  switch ($node->bundle()) {

    case 'art':
    case 'performances':
    case 'mutant_vehicles':
    case 'theme_camps':

      AlertController::alert(
        AlertController::$ACTION_DELETE,
        _getCollective($node),
        $node
      );

    break;
  }
}


/* --- Posts & Comments --- */


/**
 * Implements hook_ENTITY_TYPE_insert.
 * Generate alerts when post or comments are made.
 */
function afrikaburn_alert_comment_insert($comment){
  switch ($comment->bundle()) {

    case 'post':
      AlertController::alert(
        AlertController::$ACTION_POST,
        $comment->getCommentedEntity(),
        $comment
      );
    break;

    case 'comment':
      AlertController::alert(
        AlertController::$ACTION_COMMENT,
        $comment->getCommentedEntity(),
        $comment
      );
    break;

  }
}


/* --- Membership alerts --- */


/**
 * Implements hook_ENTITY_insert().
 * Generate alerts when colective membership changes.
 */
function afrikaburn_alert_flagging_insert($flagging) {

  $actor_id = $flagging->uid->target_id;
  $flagged_id = $flagging->entity_id->value;
  $current_id = \Drupal::currentUser()->id();

  switch ($flagging->bundle()) {

    case 'join':
      AlertController::alert(
        AlertController::$ACTION_REQUEST,
        \Drupal::entityTypeManager()
          ->getStorage('node')
          ->load($flagged_id),
        \Drupal::entityTypeManager()
          ->getStorage('user')
          ->load($actor_id)
      );
    break;

    case 'member':
      if ($actor_id != $current_id){
        AlertController::alert(
          AlertController::$ACTION_APPROVED,
          \Drupal::entityTypeManager()
            ->getStorage('node')
            ->load($flagged_id),
          \Drupal::entityTypeManager()
            ->getStorage('user')
            ->load($actor_id)
        );
      }
    break;

    case 'admin':
      if ($actor_id != $current_id){
        AlertController::alert(
          AlertController::$ACTION_ADMINED,
          \Drupal::entityTypeManager()
            ->getStorage('node')
            ->load($flagged_id),
          \Drupal::entityTypeManager()
            ->getStorage('user')
            ->load($actor_id)
        );
      }
    break;

    case 'invite':
      AlertController::alert(
        AlertController::$ACTION_INVITED,
        \Drupal::entityTypeManager()
          ->getStorage('node')
          ->load($flagged_id),
        \Drupal::entityTypeManager()
          ->getStorage('user')
          ->load($actor_id)
      );
    break;

    case 'ban':
      AlertController::alert(
        AlertController::$ACTION_BANNED,
        \Drupal::entityTypeManager()
          ->getStorage('node')
          ->load($flagged_id),
        \Drupal::entityTypeManager()
          ->getStorage('user')
          ->load($actor_id)
      );
    break;
  }
}

/**
 * Implements hook_ENTITY_delete().
 * Generate alerts when colective membership changes.
 */
function afrikaburn_alert_flagging_delete($flagging) {

  $uid = $flagging->uid->target_id;

  switch ($flagging->bundle()) {
    case 'member':
      if ($uid != Utils::currentUser()->id()) {
        AlertController::alert(
          AlertController::$ACTION_BOOTED,
          \Drupal::entityTypeManager()
            ->getStorage('node')
            ->load($flagging->entity_id->value),
          \Drupal::entityTypeManager()
            ->getStorage('user')
            ->load($uid)
        );
      }
    break;
  }
}


/* --- Utilities --- */


/**
 * Retrieve the collective attached to an entity
 */
function _getCollective($entity){
  return @array_shift(
    array_filter(
      [
        $entity->field_collective->entity,
        $entity->field_collective->getEntity(),
      ]
    )
  );
}